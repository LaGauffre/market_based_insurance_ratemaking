# Libraries----
library(ggplot2)
library(dplyr)
library(rstudioapi)
library(IsoPriceR)
library(readr)
library(parallel)
setwd(dirname(getActiveDocumentContext()$path))
getwd()
set.seed(61)
# Data ----
pet_insurance_FR <- read_csv("../data/pet_insurance_FR.csv")
data_pet_insurance <- data.frame(carrier = pet_insurance_FR$Company, race = pet_insurance_FR$Race,
r = as.numeric(sub("%", "", pet_insurance_FR$rate))/100,
d = pet_insurance_FR$deductible,
l = pet_insurance_FR$limit,
x = pet_insurance_FR$Premium)
# Sample sizes----
ns <- c(50, 100, 250, 500)
# Premium an loss model Settings ----
p_p <- pure_premium("xs", c("r", "d", "l"))
freq_dist <- model("poisson", c("lambda"))
sev_dist <- model("lognormal", c("mu", "sigma"))
l_m <- loss_model(freq_dist, sev_dist, "Lognormal(mu, sigma = 1)-Poisson(lambda)")
# True parameters of the loss model ----
lambda_true <- 0.7; mu_true <- 5.8; sigma_true <- 1
true_parms <- t(as.matrix(c(lambda_true, mu_true, sigma_true)))
colnames(true_parms) <- l_m$parm_names
# Prior assumptions----
prior_lambda <- prior_dist("uniform", "lambda",c(0, 10))
prior_mu <- prior_dist("uniform", "mu",c(-10, 10))
prior_sigma <- prior_dist("constant", "sigma", c(1))
prior_distributions <- list(prior_lambda, prior_mu, prior_sigma)
model_prior <- independent_priors(prior_distributions)
simulation_abc <- function(k){
# Fake Data
d <- sample(data_pet_insurance$d, max(ns), replace = TRUE)
l <- sample(data_pet_insurance$l, max(ns), replace = TRUE)
r <- sample(data_pet_insurance$r, max(ns), replace = TRUE)
th_premium <- matrix(c(r, d, l), nrow = max(ns))
data <- as.data.frame(th_premium); colnames(data) <- p_p$parm_names
X_true <- sample_X(l_m, true_parms, R = 10000)
data["pp"] <- compute_pure_premia(X_true, coverage_type = "xs", th_premium)
lr <- runif(max(ns) ,0.4, 0.7)
data["x"] <- data["pp"] / lr
# ABC
res <- data.frame()
for(n in ns){
sub_data <- data[1:n,]
res_abc <- abc(sub_data, model_prior, l_m, p_p,
popSize = 100,  MC_R = 100, acc = 1, sp_bounds = c(0.4, 0.7))
map <- colMeans(extract_last_cloud(res_abc))
mode <- extract_best_particle(res_abc)
if(!is.null(nrow(mode))){
mode <- mode[1 ,]
}
res <- rbind(res, compute_metric_particle(data, p_p, l_m, map, method = "map")$estimates,
compute_metric_particle(data, p_p, l_m, mode, method = "mode")$estimates)
}
res['ss'] <- as.vector(sapply(ns, function(n) rep(n, nrow(res)/4)))
return(res)
}
k <- 1
n.cores <- detectCores()
n.cores
cl <- makeCluster(7)
clusterExport(cl, c(unclass(lsf.str(envir = asNamespace("IsoPriceR"), all = T)), 'simulation_abc','ns','data_pet_insurance', 'model_prior', 'l_m', 'p_p' , 'true_parms'))
Run <- 10
# system.time(out1 <- lapply(1:Run, function(k) simulation_abc(k)))
system.time(out2 <- parLapply(cl, 1:Run, function(k) simulation_abc(k)))
# clusterExport(cl,c('exposure','ages','fit_mo_mo','lc_stan','rh_stan','apc_stan','cbd_stan','m6_stan', 'mortality_models'))
stopCluster(cl)
cl <- makeCluster(7)
clusterExport(cl, c(unclass(lsf.str(envir = asNamespace("IsoPriceR"), all = T)), 'simulation_abc','ns','data_pet_insurance', 'model_prior', 'l_m', 'p_p' , 'true_parms'))
Run <- 1000
# system.time(out1 <- lapply(1:Run, function(k) simulation_abc(k)))
system.time(out2 <- parLapply(cl, 1:Run, function(k) simulation_abc(k)))
# clusterExport(cl,c('exposure','ages','fit_mo_mo','lc_stan','rh_stan','apc_stan','cbd_stan','m6_stan', 'mortality_models'))
stopCluster(cl)
df_sim <- do.call(rbind, out2)
write.csv(df_sim, "../data/df_sim.csv")
quantity = "mu"
true_parms[1, "lambda"] * exp(true_parms[1, "mu"] + true_parms[1, "sigma"] / 2 )
exp(-true_parms[1, "lambda"])
ggplot(data = df_sim %>% filter(method == "mode" & parm_names == quantity)) + geom_boxplot(mapping = aes(x=as.factor(ss), y=parm_values))
df_sim %>% filter(method == "mode" & parm_names == quantity) %>% group_by(ss) %>% summarize(quantity = mean(parm_values))
quantity = "lambda"
ggplot(data = df_sim %>% filter(method == "mode" & parm_names == quantity)) + geom_boxplot(mapping = aes(x=as.factor(ss), y=parm_values))
df_sim %>% filter(method == "mode" & parm_names == quantity) %>% group_by(ss) %>% summarize(quantity = mean(parm_values))
quantity = "Total Claim Amount"
ggplot(data = df_sim %>% filter(method == "mode" & parm_names == quantity)) + geom_boxplot(mapping = aes(x=as.factor(ss), y=parm_values))
df_sim %>% filter(method == "mode" & parm_names == quantity) %>% group_by(ss) %>% summarize(quantity = mean(parm_values))
true_parms[1, "lambda"] * exp(true_parms[1, "mu"] + true_parms[1, "sigma"] / 2 )
df_sim %>% filter(method == "map" & parm_names == quantity) %>% group_by(ss) %>% summarize(quantity = mean(parm_values))
ggplot(data = df_sim %>% filter(method == "map" & parm_names == quantity)) + geom_boxplot(mapping = aes(x=as.factor(ss), y=parm_values))
library(kableExtra)
library(ggplot2)
library(dplyr)
library(tidyr)
library(rstudioapi)
library(IsoPriceR)
library(readr)
library(xtable)
setwd(dirname(getActiveDocumentContext()$path))
getwd()
