# d <- sample(seq(min(df$d), max(df$d), 10), max(ns), replace = TRUE)
r <- runif(max(ns), min(df$r), max(df$r))
d <- runif(max(ns), min(df$d), max(df$d))
l <- runif(max(ns), min(df$l), max(df$l))
th_premium <- matrix(c(r, d, l), nrow = max(ns))
data <- as.data.frame(th_premium); colnames(data) <- p_p$parm_names
X_true <- sample_X(l_m, true_parms, R = 10000)
data["pp"] <- compute_pure_premia(X_true, coverage_type = "xs", th_premium)
lr <- runif(max(ns) ,0.4, 0.7)
data["x"] <- data["pp"] / lr
# ABC
res <- data.frame()
n <- ns[1]
for(n in ns){
sub_data <- data[1:n,]
res_abc <- abc(sub_data, model_prior, l_m, p_p,
popSize,  MC_R, acc, sp_bounds, eps_min)
# posterior_plots(extract_last_cloud(res_abc), model_prior, l_m, ref_line = TRUE, ref_matrix = true_parms, font_size = 20 )
map <- t(as.matrix(colMeans(extract_last_cloud(res_abc))))
mode <- t(as.matrix(extract_mode(res_abc, l_m, model_prior)))
res_temp <- rbind(compute_metric_particle(data, p_p, l_m, map, method = "map")$estimates,
compute_metric_particle(data, p_p, l_m, mode, method = "mode")$estimates)
res_temp['eps'] <- max(res_abc$ds[[length(res_abc$ds)]])
res <- rbind(res, res_temp)
}
res['ss'] <- as.vector(sapply(ns, function(n) rep(n, nrow(res)/length(ns))))
return(res)
}
n.cores_max <- detectCores()
set.seed(k)
# print(k)
# Fake Data
# r <- sample(seq(min(df$r), max(df$r), 0.05), max(ns), replace = TRUE)
# l <- sample(seq(min(df$l), max(df$l), 100), max(ns), replace = TRUE)
# d <- sample(seq(min(df$d), max(df$d), 10), max(ns), replace = TRUE)
r <- runif(max(ns), min(df$r), max(df$r))
d <- runif(max(ns), min(df$d), max(df$d))
l <- runif(max(ns), min(df$l), max(df$l))
th_premium <- matrix(c(r, d, l), nrow = max(ns))
data <- as.data.frame(th_premium); colnames(data) <- p_p$parm_names
X_true <- sample_X(l_m, true_parms, R = 10000)
data["pp"] <- compute_pure_premia(X_true, coverage_type = "xs", th_premium)
lr <- runif(max(ns) ,0.4, 0.7)
data["x"] <- data["pp"] / lr
# ABC
res <- data.frame()
n <- ns[1]
sub_data <- data[1:n,]
res_abc <- abc(sub_data, model_prior, l_m, p_p,
popSize,  MC_R, acc, sp_bounds, eps_min)
popSize = 100
sub_data <- data[1:n,]
res_abc <- abc(sub_data, model_prior, l_m, p_p,
popSize,  MC_R, acc, sp_bounds, eps_min)
posterior_plots(extract_last_cloud(res_abc), model_prior, l_m, ref_line = TRUE, ref_matrix = true_parms, font_size = 20 )
# Importation des données ----
library(rstudioapi)
library(readr)
library(dplyr)
setwd(dirname(getActiveDocumentContext()$path))
getwd()
# Notes des écrits
ecrit_notes <- read_delim("ecrit_notes.csv",
delim = ";", escape_double = FALSE, trim_ws = TRUE) %>%
dplyr::select(identifiant_cle, nom, prenom, lieu_ecrit, "E:MATH", "E:OPTION", "E:FR", "E:ANGL") %>%
rename(MATH = "E:MATH",  OPTION = "E:OPTION", FR = "E:FR", ANGL = "E:ANGL")
# Notes des oraux
entretien_notes <- read_delim("entretien_notes.csv",
delim = ";", escape_double = FALSE, trim_ws = TRUE) %>%
select("Numéro BECEAS", Impression_globale, Note) %>%
rename(identifiant_cle = "Numéro BECEAS",
IMPRESS = Impression_globale, ORAL = Note ) %>% filter(ORAL > 0)
# Résultat d'admissibillité
admissible <- read_csv("candidats_admissibilite.csv") %>%
select(identifiant_cle, annee_bac,"s:ISFA","s:DUAS","s:EURIA","s:DAUPHINE", "s:ISUP") %>%
rename(ISFA = "s:ISFA",DUAS = "s:DUAS",EURIA = "s:EURIA",DAUPHINE = "s:DAUPHINE", ISUP = "s:ISUP")
admissible <-  read_delim("candidats_admissibilite.csv",
delim = ";", escape_double = FALSE, trim_ws = TRUE) %>%
select(identifiant_cle, annee_bac,"s:ISFA","s:DUAS","s:EURIA","s:DAUPHINE", "s:ISUP") %>%
rename(ISFA = "s:ISFA",DUAS = "s:DUAS",EURIA = "s:EURIA",DAUPHINE = "s:DAUPHINE", ISUP = "s:ISUP")
admissible
# Etudiant ayant accepté l'offre d'une formation
confirme <- read_csv("candidats_confirme.csv") %>% select(identifiant_cle) %>% mutate(conf = TRUE)
# Etudiant ayant accepté l'offre d'une formation
confirme <- candidats_confirme <- read_delim("candidats_confirme.csv",
delim = ";", escape_double = FALSE, trim_ws = TRUE) %>% select(identifiant_cle) %>% mutate(conf = TRUE)
confirme
classement <- entretien_notes %>%
left_join(ecrit_notes, by= "identifiant_cle") %>%
left_join(admissible, by= "identifiant_cle") %>%
left_join(confirme, by= "identifiant_cle") %>%
select(identifiant_cle, nom, prenom, lieu_ecrit, annee_bac,"ISFA","DUAS", "EURIA", "DAUPHINE", "ISUP", "conf",  MATH, OPTION, FR, ANGL, IMPRESS, ORAL) %>%
mutate( MATH = as.numeric(MATH), OPTION = as.numeric(OPTION), FR = as.numeric(FR), ANGL =as.numeric(ANGL)) %>%
mutate(NOTE_jean = (3*MATH+3*OPTION+1*FR+1*ANGL+2*ORAL)/10 -pmin((2022-annee_bac)*0.5,1)) %>%
arrange(desc(NOTE_jean))
confirme
admissible
entretien_notes
ecrit_notes
admissible <-  read_delim("candidats_admissibilite.csv",
delim = ";", escape_double = FALSE, trim_ws = TRUE) %>%
select(identifiant_cle, annee_bac,"s:ISFA","s:DUAS","s:EURIA","s:DAUPHINE", "s:ISUP") %>%
rename(ISFA = "s:ISFA",DUAS = "s:DUAS",EURIA = "s:EURIA",DAUPHINE = "s:DAUPHINE", ISUP = "s:ISUP") %>%
mutate(identifiant_cle = as.numeric(identifiant_cle))
admissible
# Etudiant ayant accepté l'offre d'une formation
confirme <- candidats_confirme <- read_delim("candidats_confirme.csv",
delim = ";", escape_double = FALSE, trim_ws = TRUE) %>% select(identifiant_cle) %>% mutate(conf = TRUE)
admissible$identifiant_cle[is.na(admissible$identifiant_cle),]
admissible$identifiant_cle
is.na(admissible$identifiant_cle)
admissible[is.na(admissible$identifiant_cle),]
# Notes des oraux
entretien_notes <- read_delim("entretien_notes.csv",
delim = ",", escape_double = FALSE, trim_ws = TRUE) %>%
select("Numéro BECEAS", Impression_globale, Note) %>%
rename(identifiant_cle = "Numéro BECEAS",
IMPRESS = Impression_globale, ORAL = Note ) %>% filter(ORAL > 0)
admissible <-  read_csv("candidats_admissibilite.csv") %>%
select(identifiant_cle, annee_bac,"s:ISFA","s:DUAS","s:EURIA","s:DAUPHINE", "s:ISUP") %>%
rename(ISFA = "s:ISFA",DUAS = "s:DUAS",EURIA = "s:EURIA",DAUPHINE = "s:DAUPHINE", ISUP = "s:ISUP") %>%
mutate(identifiant_cle = as.numeric(identifiant_cle))
# Etudiant ayant accepté l'offre d'une formation
confirme <- read_csv("candidats_confirme.csv")
# Fusion des tables
library(tidyverse)
classement <- entretien_notes %>%
left_join(ecrit_notes, by= "identifiant_cle") %>%
left_join(admissible, by= "identifiant_cle") %>%
left_join(confirme, by= "identifiant_cle") %>%
select(identifiant_cle, nom, prenom, lieu_ecrit, annee_bac,"ISFA","DUAS", "EURIA", "DAUPHINE", "ISUP", "conf",  MATH, OPTION, FR, ANGL, IMPRESS, ORAL) %>%
mutate( MATH = as.numeric(MATH), OPTION = as.numeric(OPTION), FR = as.numeric(FR), ANGL =as.numeric(ANGL)) %>%
mutate(NOTE_jean = (3*MATH+3*OPTION+1*FR+1*ANGL+2*ORAL)/10 -pmin((2022-annee_bac)*0.5,1)) %>%
arrange(desc(NOTE_jean))
# Notes des écrits
ecrit_notes <- read_delim("ecrit_notes.csv",
delim = ";", escape_double = FALSE, trim_ws = TRUE) %>%
dplyr::select(identifiant_cle, nom, prenom, lieu_ecrit, "E:MATH", "E:OPTION", "E:FR", "E:ANGL") %>%
rename(MATH = "E:MATH",  OPTION = "E:OPTION", FR = "E:FR", ANGL = "E:ANGL")
# Notes des oraux
entretien_notes <- read_delim("entretien_notes.csv",
delim = ",", escape_double = FALSE, trim_ws = TRUE) %>%
select("Numéro BECEAS", Impression_globale, Note) %>%
rename(identifiant_cle = "Numéro BECEAS",
IMPRESS = Impression_globale, ORAL = Note ) %>% filter(ORAL > 0)
admissible <-  read_csv("candidats_admissibilite.csv") %>%
select(identifiant_cle, annee_bac,"s:ISFA","s:DUAS","s:EURIA","s:DAUPHINE", "s:ISUP") %>%
rename(ISFA = "s:ISFA",DUAS = "s:DUAS",EURIA = "s:EURIA",DAUPHINE = "s:DAUPHINE", ISUP = "s:ISUP")
admissible
# Etudiant ayant accepté l'offre d'une formation
confirme <- read_csv("candidats_confirme.csv")
confirme
# Importation des données ----
library(rstudioapi)
library(readr)
library(dplyr)
setwd(dirname(getActiveDocumentContext()$path))
getwd()
# Notes des écrits
ecrit_notes <- read_delim("ecrit_notes.csv",
delim = ";", escape_double = FALSE, trim_ws = TRUE) %>%
dplyr::select(identifiant_cle, nom, prenom, lieu_ecrit, "E:MATH", "E:OPTION", "E:FR", "E:ANGL") %>%
rename(MATH = "E:MATH",  OPTION = "E:OPTION", FR = "E:FR", ANGL = "E:ANGL")
# Notes des oraux
entretien_notes <- read_delim("entretien_notes.csv",
delim = ",", escape_double = FALSE, trim_ws = TRUE) %>%
select("Numéro BECEAS", Impression_globale, Note) %>%
rename(identifiant_cle = "Numéro BECEAS",
IMPRESS = Impression_globale, ORAL = Note ) %>% filter(ORAL > 0)
# Etudiant ayant accepté l'offre d'une formation
confirme <- read_csv("candidats_confirme.csv") %>% select(identifiant_cle) %>% mutate(conf = TRUE)
# Fusion des tables
library(tidyverse)
classement <- entretien_notes %>%
left_join(ecrit_notes, by= "identifiant_cle") %>%
left_join(admissible, by= "identifiant_cle") %>%
left_join(confirme, by= "identifiant_cle") %>%
select(identifiant_cle, nom, prenom, lieu_ecrit, annee_bac,"ISFA","DUAS", "EURIA", "DAUPHINE", "ISUP", "conf",  MATH, OPTION, FR, ANGL, IMPRESS, ORAL) %>%
mutate( MATH = as.numeric(MATH), OPTION = as.numeric(OPTION), FR = as.numeric(FR), ANGL =as.numeric(ANGL)) %>%
mutate(NOTE_jean = (3*MATH+3*OPTION+1*FR+1*ANGL+2*ORAL)/10 -pmin((2022-annee_bac)*0.5,1)) %>%
arrange(desc(NOTE_jean))
# Notes des oraux
entretien_notes <- read_delim("entretien_notes.csv",
delim = ",", escape_double = FALSE, trim_ws = TRUE) %>%
select("Numéro BECEAS", Impression_globale, Note) %>%
rename(identifiant_cle = "Numéro BECEAS",
IMPRESS = Impression_globale, ORAL = Note ) %>% filter(ORAL > 0)
read_delim("entretien_notes.csv",
delim = ",", escape_double = FALSE, trim_ws = TRUE)
# Notes des oraux
entretien_notes <- read_delim("entretien_notes.csv",
delim = ";", escape_double = FALSE, trim_ws = TRUE) %>%
select("Numéro BECEAS", Impression_globale, Note) %>%
rename(identifiant_cle = "Numéro BECEAS",
IMPRESS = Impression_globale, ORAL = Note ) %>% filter(ORAL > 0)
admissible <-  read_csv("candidats_admissibilite.csv") %>%
select(identifiant_cle, annee_bac,"s:ISFA","s:DUAS","s:EURIA","s:DAUPHINE", "s:ISUP") %>%
rename(ISFA = "s:ISFA",DUAS = "s:DUAS",EURIA = "s:EURIA",DAUPHINE = "s:DAUPHINE", ISUP = "s:ISUP")
# Etudiant ayant accepté l'offre d'une formation
confirme <- read_csv("candidats_confirme.csv") %>% select(identifiant_cle) %>% mutate(conf = TRUE)
# Fusion des tables
library(tidyverse)
classement <- entretien_notes %>%
left_join(ecrit_notes, by= "identifiant_cle") %>%
left_join(admissible, by= "identifiant_cle") %>%
left_join(confirme, by= "identifiant_cle") %>%
select(identifiant_cle, nom, prenom, lieu_ecrit, annee_bac,"ISFA","DUAS", "EURIA", "DAUPHINE", "ISUP", "conf",  MATH, OPTION, FR, ANGL, IMPRESS, ORAL) %>%
mutate( MATH = as.numeric(MATH), OPTION = as.numeric(OPTION), FR = as.numeric(FR), ANGL =as.numeric(ANGL)) %>%
mutate(NOTE_jean = (3*MATH+3*OPTION+1*FR+1*ANGL+2*ORAL)/10 -pmin((2022-annee_bac)*0.5,1)) %>%
arrange(desc(NOTE_jean))
classement["rang"] = rownames(classement)
liste_principale <- classement  %>% filter(IMPRESS >= 3, ORAL > 10 )
refus <- classement  %>% filter(IMPRESS < 3 | ORAL <= 10 )
admission_probable <- liste_principale %>% filter(
(DAUPHINE != "admis" &
ISFA != "admis" &
is.na(conf)) | lieu_ecrit == "STR"
)
admission_probable
read_delim("entretien_notes.csv",
delim = ";", escape_double = FALSE, trim_ws = TRUE)
read_delim("entretien_notes.csv",
delim = ";", escape_double = FALSE, trim_ws = TRUE) %>%
mutate(Impression_global = ifelse(Impression_global <= 2, 0, Impression_global))
read_delim("entretien_notes.csv",
delim = ";", escape_double = FALSE, trim_ws = TRUE)
read_delim("entretien_notes.csv",
delim = ";", escape_double = FALSE, trim_ws = TRUE) %>%
mutate(Impression_globale = ifelse(Impression_globale <= 2, 0, Impression_globale))
# Notes des oraux
entretien_notes <- read_delim("entretien_notes.csv",
delim = ";", escape_double = FALSE, trim_ws = TRUE) %>%
mutate(Impression_globale = ifelse(Impression_globale <= 2, 0, Impression_globale)) %>%
mutate(ORAL =  (Motivation + Expression + Ouverture + 3*Impression_globale) *2/3)
# Notes des oraux
entretien_notes <- read_delim("entretien_notes.csv",
delim = ";", escape_double = FALSE, trim_ws = TRUE) %>%
mutate(Impression_globale = ifelse(Impression_globale <= 2, 0, Impression_globale)) %>%
mutate(ORAL =  (Motivation + Expression + Ouverture + 3*Impression_globale) *2/3)
# Notes des oraux
entretien_notes <- read_delim("entretien_notes.csv",
delim = ";", escape_double = FALSE, trim_ws = TRUE) %>%
mutate(Impression_globale = ifelse(Impression_globale <= 2, 0, Impression_globale)) %>%
mutate(ORAL =  (Motivation + Expression + Ouverture + 3*Impression_globale) *2/3) %>%
select("Numéro BECEAS", ORAL) %>%
rename(identifiant_cle = "Numéro BECEAS") %>% filter(ORAL > 0)
admissible <-  read_csv("candidats_admissibilite.csv") %>%
select(identifiant_cle, annee_bac,"s:ISFA","s:DUAS","s:EURIA","s:DAUPHINE", "s:ISUP") %>%
rename(ISFA = "s:ISFA",DUAS = "s:DUAS",EURIA = "s:EURIA",DAUPHINE = "s:DAUPHINE", ISUP = "s:ISUP")
# Etudiant ayant accepté l'offre d'une formation
confirme <- read_csv("candidats_confirme.csv") %>% select(identifiant_cle) %>% mutate(conf = TRUE)
classement <- entretien_notes %>%
left_join(ecrit_notes, by= "identifiant_cle") %>%
left_join(admissible, by= "identifiant_cle") %>%
left_join(confirme, by= "identifiant_cle") %>%
select(identifiant_cle, nom, prenom, lieu_ecrit, annee_bac,"ISFA","DUAS", "EURIA", "DAUPHINE", "ISUP", "conf",  MATH, OPTION, FR, ANGL, IMPRESS, ORAL) %>%
mutate( MATH = as.numeric(MATH), OPTION = as.numeric(OPTION), FR = as.numeric(FR), ANGL =as.numeric(ANGL)) %>%
mutate(NOTE_jean = (3*MATH+3*OPTION+1*FR+1*ANGL+2*ORAL)/10 -pmin((2022-annee_bac)*0.5,1)) %>%
arrange(desc(NOTE_jean))
classement["rang"] = rownames(classement)
liste_principale <- classement  %>% filter(IMPRESS >= 3, ORAL > 10 )
liste_principale
refus <- classement  %>% filter(IMPRESS < 3 | ORAL <= 10 )
refus
# Importation des données ----
library(rstudioapi)
library(readr)
library(dplyr)
setwd(dirname(getActiveDocumentContext()$path))
getwd()
# Notes des écrits
ecrit_notes <- read_delim("ecrit_notes.csv",
delim = ";", escape_double = FALSE, trim_ws = TRUE) %>%
dplyr::select(identifiant_cle, nom, prenom, lieu_ecrit, "E:MATH", "E:OPTION", "E:FR", "E:ANGL") %>%
rename(MATH = "E:MATH",  OPTION = "E:OPTION", FR = "E:FR", ANGL = "E:ANGL")
# Notes des oraux
entretien_notes <- read_delim("entretien_notes.csv",
delim = ";", escape_double = FALSE, trim_ws = TRUE) %>%
mutate(Impression_globale = ifelse(Impression_globale <= 2, 0, Impression_globale)) %>%
mutate(ORAL =  (Motivation + Expression + Ouverture + 3*Impression_globale) *2/3) %>%
select("Numéro BECEAS", ORAL) %>%
rename(identifiant_cle = "Numéro BECEAS") %>% filter(ORAL > 0)
admissible <-  read_csv("candidats_admissibilite.csv") %>%
select(identifiant_cle, annee_bac,"s:ISFA","s:DUAS","s:EURIA","s:DAUPHINE", "s:ISUP") %>%
rename(ISFA = "s:ISFA",DUAS = "s:DUAS",EURIA = "s:EURIA",DAUPHINE = "s:DAUPHINE", ISUP = "s:ISUP")
# Etudiant ayant accepté l'offre d'une formation
confirme <- read_csv("candidats_confirme.csv") %>% select(identifiant_cle) %>% mutate(conf = TRUE)
# Fusion des tables
library(tidyverse)
classement <- entretien_notes %>%
left_join(ecrit_notes, by= "identifiant_cle") %>%
left_join(admissible, by= "identifiant_cle") %>%
left_join(confirme, by= "identifiant_cle") %>%
select(identifiant_cle, nom, prenom, lieu_ecrit, annee_bac,"ISFA","DUAS", "EURIA", "DAUPHINE", "ISUP", "conf",  MATH, OPTION, FR, ANGL, IMPRESS, ORAL) %>%
mutate( MATH = as.numeric(MATH), OPTION = as.numeric(OPTION), FR = as.numeric(FR), ANGL =as.numeric(ANGL)) %>%
mutate(NOTE_jean = (3*MATH+3*OPTION+1*FR+1*ANGL+2*ORAL)/10 -pmin((2022-annee_bac)*0.5,1)) %>%
arrange(desc(NOTE_jean))
classement <- entretien_notes %>%
left_join(ecrit_notes, by= "identifiant_cle") %>%
left_join(admissible, by= "identifiant_cle") %>%
left_join(confirme, by= "identifiant_cle") %>%
select(identifiant_cle, nom, prenom, lieu_ecrit, annee_bac,"ISFA","DUAS", "EURIA", "DAUPHINE", "ISUP", "conf",  MATH, OPTION, FR, ANGL, ORAL) %>%
mutate( MATH = as.numeric(MATH), OPTION = as.numeric(OPTION), FR = as.numeric(FR), ANGL =as.numeric(ANGL)) %>%
mutate(NOTE_jean = (3*MATH+3*OPTION+1*FR+1*ANGL+2*ORAL)/10 -pmin((2022-annee_bac)*0.5,1)) %>%
arrange(desc(NOTE_jean))
classement["rang"] = rownames(classement)
liste_principale <- classement  %>% filter(ORAL > 10 )
liste_principale
liste_principale <- classement  %>% filter(ORAL > 12 )
liste_principale
refus <- classement  %>% filter( ORAL <= 12 )
refus
admission_probable <- liste_principale %>% filter(
(DAUPHINE != "admis" &
ISFA != "admis" &
is.na(conf)) | lieu_ecrit == "STR"
)
admission_probable
# Importation des données ----
library(rstudioapi)
library(readr)
library(dplyr)
setwd(dirname(getActiveDocumentContext()$path))
getwd()
# Notes des écrits
ecrit_notes <- read_delim("ecrit_notes.csv",
delim = ";", escape_double = FALSE, trim_ws = TRUE) %>%
dplyr::select(identifiant_cle, nom, prenom, lieu_ecrit, "E:MATH", "E:OPTION", "E:FR", "E:ANGL") %>%
rename(MATH = "E:MATH",  OPTION = "E:OPTION", FR = "E:FR", ANGL = "E:ANGL")
# Notes des oraux
entretien_notes <- read_delim("entretien_notes.csv",
delim = ";", escape_double = FALSE, trim_ws = TRUE) %>%
mutate(Impression_globale = ifelse(Impression_globale <= 2, 0, Impression_globale)) %>%
mutate(ORAL =  (Motivation + Expression + Ouverture + 3*Impression_globale) *2/3) %>%
select("Numéro BECEAS", ORAL) %>%
rename(identifiant_cle = "Numéro BECEAS") %>% filter(ORAL > 0)
admissible <-  read_csv("candidats_admissibilite.csv") %>%
select(identifiant_cle, annee_bac,"s:ISFA","s:DUAS","s:EURIA","s:DAUPHINE", "s:ISUP") %>%
rename(ISFA = "s:ISFA",DUAS = "s:DUAS",EURIA = "s:EURIA",DAUPHINE = "s:DAUPHINE", ISUP = "s:ISUP")
# Etudiant ayant accepté l'offre d'une formation
confirme <- read_csv("candidats_confirme.csv") %>% select(identifiant_cle) %>% mutate(conf = TRUE)
# Fusion des tables
library(tidyverse)
classement <- entretien_notes %>%
left_join(ecrit_notes, by= "identifiant_cle") %>%
left_join(admissible, by= "identifiant_cle") %>%
left_join(confirme, by= "identifiant_cle") %>%
select(identifiant_cle, nom, prenom, lieu_ecrit, annee_bac,"ISFA","DUAS", "EURIA", "DAUPHINE", "ISUP", "conf",  MATH, OPTION, FR, ANGL, ORAL) %>%
mutate( MATH = as.numeric(MATH), OPTION = as.numeric(OPTION), FR = as.numeric(FR), ANGL =as.numeric(ANGL)) %>%
mutate(NOTE_jean = (3*MATH+3*OPTION+1*FR+1*ANGL+2*ORAL)/10 -pmin((2022-annee_bac)*0.5,1)) %>%
arrange(desc(NOTE_jean))
classement["rang"] = rownames(classement)
liste_principale <- classement  %>% filter(ORAL > 12 )
refus <- classement  %>% filter( ORAL <= 12 )
admission_probable <- liste_principale %>% filter(
(DAUPHINE != "admis" &
ISFA != "admis" &
is.na(conf)) | lieu_ecrit == "STR"
)
admission_probable
refus
knitr::opts_chunk$set(echo = TRUE)
library(latex2exp)
library(IsoPriceR)
library(ggplot2)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
set.seed(142)
# Loss model
freq_dist <- model("poisson", c("lambda"))
sev_dist <- model("lognormal", c("mu", "sigma"))
l_m <- loss_model(freq_dist, sev_dist, "Poisson-Lognormal")
# True parameter
lambda_true <- 3; mu_true <- 0; sigma_true <- 1
true_parms <- t(as.matrix(c(lambda_true, mu_true, sigma_true)))
colnames(true_parms) <- l_m$parm_names
# Data
## Sample of claim data to calculate the true pure premium via Monte Carlo
X_true <- sample_X(l_m, true_parms, R = 10000)
summary(X_true)
## Characteristics of the pure premium which depends on the parameter of the insurance coverage
p_p <- pure_premium("xs", c("r", "d", "l"))
## Random premium parameters
n <- 3; r <- c(0.75, 1, 1); d <- c(0, 1.8, 0); l <- c(Inf, Inf, 6)
## Data frame with the insurance coverage parameters and the pure premium
th_premium <- matrix(c(r, d, l), nrow = n)
pps <- compute_pure_premia(X_true, coverage_type = "xs", th_premium)
df_pp <- data.frame(r = r, d = d, l = l, pp=pps)
df_pp
data <- df_pp[,c("r", "d", "l")]
data["x"] <- df_pp$pp
ths_premium <- as.matrix(data[p_p$parm_names])
lambda_true <- 3; mu_true <- 0; sigma_true <- 1
# Sigma --------------
# Pure premium calculation for a range of risk model parameters
sigmas <- seq(0.1, 2, 0.1)
cloud <- as.matrix(expand.grid(c(3), c(0),sigmas))
colnames(cloud) <- l_m$parm_names
X <- sample_X(l_m , cloud, R = 10000)
pp_fake <- compute_pure_premia(X, coverage_type = "xs", ths_premium)
# Calculation of the RMSE between true and wrong pure premium
ds <- sapply(1:nrow(cloud), function(k) mean((pp_fake[, k] - data$x)^2)^(1/2))
df_ds <- data.frame(cloud)
df_ds <- cbind(df_ds, ds)
ggplot(data = df_ds) + geom_line(mapping = aes(x = sigma, y = ds))
# Lambda --------------
lambdas <- seq(0.1, 5, 0.1)
cloud <- as.matrix(expand.grid(lambdas, c(0),c(1)))
colnames(cloud) <- l_m$parm_names
X <- sample_X(l_m , cloud, R = 10000)
pp_fake <- compute_pure_premia(X, coverage_type = "xs", ths_premium)
# Calculation of the RMSE between true and wrong pure premium
ds <- sapply(1:nrow(cloud), function(k) mean((pp_fake[, k] - data$x)^2)^(1/2))
df_ds <- data.frame(cloud)
df_ds <- cbind(df_ds, ds)
ggplot(data = df_ds) + geom_line(mapping = aes(x = lambda, y = ds))
# mu --------------
mus <- seq(-3, 3, 0.1)
cloud <- as.matrix(expand.grid(c(3), mus,c(1)))
colnames(cloud) <- l_m$parm_names
X <- sample_X(l_m , cloud, R = 10000)
pp_fake <- compute_pure_premia(X, coverage_type = "xs", ths_premium)
# Calculation of the RMSE between true and wrong pure premium
ds <- sapply(1:nrow(cloud), function(k) mean((pp_fake[, k] - data$x)^2)^(1/2))
df_ds <- data.frame(cloud)
df_ds <- cbind(df_ds, ds)
ggplot(data = df_ds) + geom_line(mapping = aes(x = mu, y = ds))
# Pure premium calculation for a range of risk model parameters
sigmas<- seq(0.4, 2, 0.2); mus <- seq(-1, 1, 0.2); lambdas <- seq(2, 4, 0.2)
cloud <- as.matrix(expand.grid(lambdas, mus,sigmas))
colnames(cloud) <- l_m$parm_names
X <- sample_X(l_m , cloud, R = 5000)
pp_fake <- compute_pure_premia(X, coverage_type = "xs", ths_premium)
# Calculation of the RMSE between true and wrong pure premium
ds <- sapply(1:nrow(cloud), function(k) mean((pp_fake[, k] - data$x)^2)^(1/2))
df_ds <- data.frame(cloud)
df_ds <- cbind(df_ds, ds)
print(df_ds[df_ds$ds == min(df_ds$ds),])
print(df_ds[df_ds$ds == min(df_ds$ds),])
# Prior settings for the parameters
prior_lambda <- prior_dist("uniform", "lambda",c(0, 10))
prior_mu <- prior_dist("uniform", "mu",c(-3,3))
prior_sigma <- prior_dist("uniform", "sigma", c(0, 5))
prior_distributions <- list(prior_lambda, prior_mu, prior_sigma)
model_prior <- independent_priors(prior_distributions)
# Settings for the abc algorithm
popSize <- 500;  MC_R<- 500; acc <- 0.02; sp_bounds <- c(1, 1)
data <- df_pp[,c("r", "d", "l")]
data["x"] <- df_pp$pp
res_abc <- abc(data, model_prior, l_m, p_p, popSize, MC_R, acc, sp_bounds)
# We retrieve the cloud of particles associated to each generation
cloud_dfs <- lapply(res_abc$Clouds, as.data.frame)
cloud_df <- do.call(rbind, cloud_dfs)
cloud_df$generation <- sort(rep(1:length(res_abc$Clouds), popSize))
cloud_df_plot <- rbind(
data.frame(parm = cloud_df$lambda, parm_name = "lambda", generation = cloud_df$generation),
data.frame(parm = cloud_df$sigma, parm_name = "sigma", generation = cloud_df$generation)
)
cloud_df_plot$parm_name <-as.factor(cloud_df_plot$parm_name)
levels(cloud_df_plot$parm_name) <- c(lambda = TeX("$\\lambda$"), sigma = TeX("$\\sigma$"))
ggplot2::ggplot(data = cloud_df ) + ggplot2::geom_density(data = cloud_df, mapping = aes(x=lambda, color = as.factor(generation))) + ggplot2::labs(x=TeX("$\\lambda$"), y = "Density", color = "Generation") + ggplot2::theme_classic(base_size = 20) + ggplot2::theme(legend.position="right") + ggplot2::geom_vline(ggplot2::aes(xintercept=true_parms[,1]), color="black",
linetype="dashed")
ggplot2::ggplot(data = cloud_df ) + ggplot2::geom_density(data = cloud_df, mapping = aes(x=mu, color = as.factor(generation))) + ggplot2::labs(x=TeX("$\\mu$"), y = "Density", color = "Generation") + ggplot2::theme_classic(base_size = 20) + ggplot2::theme(legend.position="right") + ggplot2::geom_vline(ggplot2::aes(xintercept=true_parms[,2]), color="black",
linetype="dashed")
ggplot2::ggplot(data = cloud_df ) + ggplot2::geom_density(data = cloud_df, mapping = aes(x=sigma, color = as.factor(generation))) + ggplot2::labs(x=TeX("$\\sigma$"), y = "Density", color = "Generation") + ggplot2::theme_classic(base_size = 20) + ggplot2::theme(legend.position="right") + ggplot2::geom_vline(ggplot2::aes(xintercept=true_parms[,3]), color="black",
linetype="dashed")
# Prior settings for the parameters
prior_lambda <- prior_dist("uniform", "lambda",c(0, 10))
prior_mu <- prior_dist("uniform", "mu",c(-3,3))
prior_sigma <- prior_dist("uniform", "sigma", c(0, 5))
prior_distributions <- list(prior_lambda, prior_mu, prior_sigma)
model_prior <- independent_priors(prior_distributions)
# Settings for the abc algorithm
popSize <- 500;  MC_R<- 500; acc <- 0.005; sp_bounds <- c(1, 1)
data <- df_pp[,c("r", "d", "l")]
data["x"] <- df_pp$pp
res_abc <- abc(data, model_prior, l_m, p_p, popSize, MC_R, acc, sp_bounds)
# We retrieve the cloud of particles associated to each generation
cloud_dfs <- lapply(res_abc$Clouds, as.data.frame)
cloud_df <- do.call(rbind, cloud_dfs)
cloud_df$generation <- sort(rep(1:length(res_abc$Clouds), popSize))
cloud_df_plot <- rbind(
data.frame(parm = cloud_df$lambda, parm_name = "lambda", generation = cloud_df$generation),
data.frame(parm = cloud_df$sigma, parm_name = "sigma", generation = cloud_df$generation)
)
cloud_df_plot$parm_name <-as.factor(cloud_df_plot$parm_name)
levels(cloud_df_plot$parm_name) <- c(lambda = TeX("$\\lambda$"), sigma = TeX("$\\sigma$"))
ggplot2::ggplot(data = cloud_df ) + ggplot2::geom_density(data = cloud_df, mapping = aes(x=lambda, color = as.factor(generation))) + ggplot2::labs(x=TeX("$\\lambda$"), y = "Density", color = "Generation") + ggplot2::theme_classic(base_size = 20) + ggplot2::theme(legend.position="right") + ggplot2::geom_vline(ggplot2::aes(xintercept=true_parms[,1]), color="black",
linetype="dashed")
ggplot2::ggplot(data = cloud_df ) + ggplot2::geom_density(data = cloud_df, mapping = aes(x=mu, color = as.factor(generation))) + ggplot2::labs(x=TeX("$\\mu$"), y = "Density", color = "Generation") + ggplot2::theme_classic(base_size = 20) + ggplot2::theme(legend.position="right") + ggplot2::geom_vline(ggplot2::aes(xintercept=true_parms[,2]), color="black",
linetype="dashed")
ggplot2::ggplot(data = cloud_df ) + ggplot2::geom_density(data = cloud_df, mapping = aes(x=sigma, color = as.factor(generation))) + ggplot2::labs(x=TeX("$\\sigma$"), y = "Density", color = "Generation") + ggplot2::theme_classic(base_size = 20) + ggplot2::theme(legend.position="right") + ggplot2::geom_vline(ggplot2::aes(xintercept=true_parms[,3]), color="black",
linetype="dashed")
res_abc$ds
length(res_abc$ds)
res_abc$ds[[length(res_abc$ds)]]
min(res_abc$ds[[length(res_abc$ds)]])
res_abc$ds[[length(res_abc$ds)]] == min(res_abc$ds[[length(res_abc$ds)]])
cloud_dfs[[length(res_abc$ds)]]
cloud_dfs[[length(res_abc$ds)]][res_abc$ds[[length(res_abc$ds)]] == min(res_abc$ds[[length(res_abc$ds)]]),]
plot(df_ds$ds)
plot(df_ds$ds[df_ds$ds < 10])
ggplot(data = df_ds) + geom_line(mapping(y = ds))
ggplot(data = df_ds) + geom_line(mapping = aes(y = ds))
df_ds
nrow(df_ds)
ggplot(data = df_ds) + geom_line(mapping = aes(x = 1: nrow(df_ds), y = ds))
ggplot(data = df_ds) + geom_line(mapping = aes(x = 1: nrow(df_ds), y = ds, color = as.factor(mu)))
ggplot(data = df_ds) + geom_line(mapping = aes(x = 1: nrow(df_ds), y = ds, color = as.factor(lambda)))
ggplot(data = df_ds) + geom_line(mapping = aes(x = 1: nrow(df_ds), y = ds, color = as.factor(sigma)))
ggplot(data = df_ds) + geom_line(mapping = aes(x = 1: nrow(df_ds), y = ds, color = as.factor(lambda)))
ggplot(data = df_ds) + geom_line(mapping = aes(x = 1: nrow(df_ds), y = ds, color = as.factor(mu)))
