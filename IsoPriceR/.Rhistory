#    scale_x_discrete(labels= x_ticks) +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1, size = 14)))
(post_boxplot <- ggplot(data = posterior_predictive_distribution) +
geom_boxplot(mapping = aes(y = eval(parse(text=quantity)) , x = as.factor(model))) +
theme_classic(base_size = 20)+ labs(x= "",  title = quantity_title, y = "") +
#    scale_x_discrete(labels= x_ticks) +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1, size = 8)))
posterior_predictive_distribution %>% group_by(model)%>% summarize(quantity = mean(quantity))
colnames(posterior_predictive_distribution)
posterior_predictive_distribution %>% group_by(model) %>% summarize(Total_Claim_Amount = mean(Total_Claim_Amount))
length(res_abc_list)
extract_last_cloud(res_abc_list[[k]])
iso_df <- data.frame()
k <- 1
for(k in 1:length(res_abc_list)){
map <- t(as.matrix(colMeans(extract_last_cloud(res_abc_list[[k]]))))
pp <- compute_metric_particle(data, p_p, loss_models[[k]], map, method = "map")$pp
# mode <- t(as.matrix(extract_mode(res_abc_list[[k]], loss_models[[k]], prior_distributions[[k]])))
# pp <- compute_metric_particle(data, p_p, loss_models[[k]], mode, method = "mode")$pp
res_iso <- isoreg(pp, data$x)
iso_df <- rbind(iso_df,
data.frame(model = rep(loss_models[[k]]$model_name, nrow(data)), x= sort(res_iso$x), y = res_iso$yf))
}
(iso_plot <- ggplot(data = iso_df) + geom_step(mapping = aes(x= x, y = y, color = model)) +  ggplot2::theme_classic(base_size = 14) + labs(x= "Pure premium", y = "Commercial premium", title = "", color = "Model") + theme(legend.position="none"))
ggsave("../paper/figures/iso_real_data_all_models.pdf", iso_plot)
extract_last_cloud(res_abc_list[[3]])
extract_last_cloud(res_abc_list[[1]])
extract_last_cloud(res_abc_list[[6]])
extract_last_cloud(res_abc_list[[8]])
last_cloud <- extract_last_cloud(res_abc_list[[8]])
compute_metric_cloud(data, p_p, loss_models[[8]], last_cloud)$estimates
pst_estimates <- compute_metric_cloud(data, p_p, loss_models[[8]], last_cloud)$estimates
pst_estimates <- compute_metric_cloud(data, p_p, loss_models[[8]], last_cloud)$estimates
pst_estimates
pst_estimates
last_cloud
cbind(pst_estimates, last_cloud[c("p, sigma")])
cbind(pst_estimates, last_cloud[,c("p, sigma")])
last_cloud[,c("p, sigma")]
last_cloud[c("p, sigma")]
last_cloud <- extract_last_cloud(res_abc_list[[8]])
last_cloud[c("p, sigma")]
cbind(pst_estimates, last_cloud[c("p", "sigma")])
last_cloud[c("p", "sigma")]
as.data.frame(last_cloud)[c("p", "sigma")]
cbind(pst_estimates, as.data.frame(last_cloud)[c("p", "sigma")])
map <- t(as.matrix(colMeans(extract_last_cloud(res_abc_list[[k]]))))
map
map <- t(as.matrix(colMeans(extract_last_cloud(res_abc_list[[8]]))))
map
compute_metric_particle(data, p_p, loss_models[[k]], map)
posterior_estimates <- compute_metric_particle(data, p_p, loss_models[[k]], map, method = "map")$estimates
posterior_estimates
posterior_estimates <- compute_metric_particle(data, p_p, loss_models[[8]], map, method = "map")$estimates
posterior_estimates
last_cloud <- extract_last_cloud(res_abc_list[[1]])
last_cloud
last_cloud <- extract_last_cloud(res_abc_list[[3]])
last_cloud
last_cloud <- extract_last_cloud(res_abc_list[[2]])
last_cloud
pst_estimates <- compute_metric_cloud(data, p_p, loss_models[[8]], last_cloud)$estimates
last_cloud <- extract_last_cloud(res_abc_list[[k]])
pst_estimates <- compute_metric_cloud(data, p_p, loss_models[[k]], last_cloud)$estimates
cbind(pst_estimates, as.data.frame(last_cloud)[c("p", "sigma")])
map
posterior_estimates <- compute_metric_particle(data, p_p, loss_models[[k]], map, method = "map")$estimates
compute_metric_particle(data, p_p, loss_models[[k]], map, method = "map")$estimates
loss_models[[k]]
res_abc_list[[k]]
k<- 2
last_cloud <- extract_last_cloud(res_abc_list[[k]])
last_cloud
loss_models[[k]]
k<- 2
last_cloud <- extract_last_cloud(res_abc_list[[k]])
pst_estimates <- compute_metric_cloud(data, p_p, loss_models[[k]], last_cloud)$estimates
cbind(pst_estimates, as.data.frame(last_cloud)[c("p", "sigma")])
map <- t(as.matrix(colMeans(extract_last_cloud(res_abc_list[[k]]))))
map
compute_metric_particle(data, p_p, loss_models[[k]], map, method = "map")$estimates
compute_metric_particle(data, p_p, loss_models[[k]], map, method = "map")$estimates
compute_metric_particle(data, p_p, loss_models[[k]], map, method = "map")$estimates
compute_metric_particle(data, p_p, loss_models[[k]], map, method = "map")$estimates
compute_metric_particle(data, p_p, loss_models[[k]], map, method = "map")$estimates
compute_metric_particle(data, p_p, loss_models[[k]], map, method = "map")$estimates
compute_metric_particle(data, p_p, loss_models[[k]], map, method = "map")$estimates
compute_metric_particle(data, p_p, loss_models[[k]], map, method = "map")$estimates
compute_metric_particle(data, p_p, loss_models[[k]], map, method = "map")$estimates
compute_metric_particle(data, p_p, loss_models[[k]], map, method = "map")$estimates
compute_metric_particle(data, p_p, loss_models[[k]], map, method = "map")$estimates
k<- 2
last_cloud <- extract_last_cloud(res_abc_list[[k]])
pst_estimates <- compute_metric_cloud(data, p_p, loss_models[[k]], last_cloud)$estimates
compute_metric_particle(data, p_p, loss_models[[k]], map, method = "map")$estimates
compute_metric_particle(data, p_p, loss_models[[k]], map, method = "map")$estimates
compute_metric_particle(data, p_p, loss_models[[k]], map, method = "map")$estimates
compute_metric_particle(data, p_p, loss_models[[k]], map, method = "map")$estimates
compute_metric_particle(data, p_p, loss_models[[k]], map, method = "map")$estimates
compute_metric_particle(data, p_p, loss_models[[k]], map, method = "map")$estimates
cbind(pst_estimates, as.data.frame(last_cloud)[c("p", "sigma")])
(post_boxplot <- ggplot(data = posterior_predictive_distribution) +
geom_boxplot(mapping = aes(y = eval(parse(text=quantity)) , x = as.factor(model))) +
theme_classic(base_size = 20)+ labs(x= "",  title = quantity_title, y = "") +
#    scale_x_discrete(labels= x_ticks) +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1, size = 8)))
cbind(pst_estimates, as.data.frame(last_cloud)[c("p", "sigma")])
(post_boxplot <- ggplot(data = posterior_predictive_distribution) +
geom_boxplot(mapping = aes(y = eval(parse(text=quantity)) , x = as.factor(model))) +
theme_classic(base_size = 20)+ labs(x= "",  title = quantity_title, y = "") +
#    scale_x_discrete(labels= x_ticks) +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1, size = 8)))
compute_metric_particle(data, p_p, loss_models[[k]], map, method = "map")$estimates
(post_boxplot <- ggplot(data = posterior_predictive_distribution) +
geom_boxplot(mapping = aes(y = eval(parse(text=quantity)) , x = as.factor(model))) +
theme_classic(base_size = 20)+ labs(x= "",  title = quantity_title, y = "") +
#    scale_x_discrete(labels= x_ticks) +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1, size = 8)))
quantity <- colnames(posterior_predictive_distribution)[2:6][1]
quantity_titles <- c("Claim Frequency", "Claim Amount", "P(N=0)", "Total Claim Amount","Loss Ratio" )
x_ticks <- c("Bin(a=12,p)-Gam(alpha,beta=1)", "Bin(a=12,p)-LNorm(mu,sigma=1)","Bin(a=12,p)-LNorm(mu=0,sigma)",
"Geom(p)-Gam(alpha,beta=1)", "Geom(p)-LNorm(mu,sigma=1)","Geom(p)-LNorm(mu=0,sigma)",
"Pois(lambda)-Gam(alpha,beta=1)", "Pois(lambda)-LNorm(mu,sigma=1)","Pois(lambda)-LNorm(mu=0,sigma)")
i <- 1
for(quantity in colnames(posterior_predictive_distribution)[2:6]){
(post_boxplot <- ggplot(data = posterior_predictive_distribution) +
geom_boxplot(mapping = aes(y = eval(parse(text=quantity)) , x = as.factor(model))) +
theme_classic(base_size = 20)+ labs(x= "",  title = quantity_titles[i], y = "") +
scale_x_discrete(labels= x_ticks) +
theme(axis.text.x = element_text(angle = 75, vjust = 1, hjust=1, size = 14)))
i <- i+1
ggsave(paste0("../paper/figures/post_boxplot_real_data_",quantity, ".pdf"), post_boxplot)
}
TeX(r'($\alpha  x^\alpha$, where $\alpha \in \{1 \ldots 5\}$)')
library(latex2exp)
install.packages("latex2exp")
library(latex2exp)
TeX(r'($\alpha  x^\alpha$, where $\alpha \in \{1 \ldots 5\}$)')
TeX(r'($Bin(a=12,p)-Gam(\alpha,\beta=1)$)')
library(latex2exp)
TeX(r'($Bin(a=12,p)-Gam(\alpha,\beta=1)$)')
quantity <- colnames(posterior_predictive_distribution)[2:6][1]
quantity_titles <- c("Claim Frequency", "Claim Amount", "P(N=0)", "Total Claim Amount","Loss Ratio" )
x_ticks <- c(TeX(r'($Bin(a=12,p)-Gam(\alpha,\beta=1)$)'), "Bin(a=12,p)-LNorm(mu,sigma=1)","Bin(a=12,p)-LNorm(mu=0,sigma)",
"Geom(p)-Gam(alpha,beta=1)", "Geom(p)-LNorm(mu,sigma=1)","Geom(p)-LNorm(mu=0,sigma)",
"Pois(lambda)-Gam(alpha,beta=1)", "Pois(lambda)-LNorm(mu,sigma=1)","Pois(lambda)-LNorm(mu=0,sigma)")
i <- 1
for(quantity in colnames(posterior_predictive_distribution)[2:6]){
(post_boxplot <- ggplot(data = posterior_predictive_distribution) +
geom_boxplot(mapping = aes(y = eval(parse(text=quantity)) , x = as.factor(model))) +
theme_classic(base_size = 20)+ labs(x= "",  title = quantity_titles[i], y = "") +
scale_x_discrete(labels= x_ticks) +
theme(axis.text.x = element_text(angle = 75, vjust = 1, hjust=1, size = 14)))
i <- i+1
ggsave(paste0("../paper/figures/post_boxplot_real_data_",quantity, ".pdf"), post_boxplot)
}
library(latex2exp)
TeX(r'($Bin(a=12,p)-Gam(\alpha,\beta=1)$)')
quantity <- colnames(posterior_predictive_distribution)[2:6][1]
quantity_titles <- c("Claim Frequency", "Claim Amount", "P(N=0)", "Total Claim Amount","Loss Ratio" )
x_ticks <- c(TeX(r'($Bin(a=12,p)-Gam(\alpha,\beta=1)$)'),
TeX(r'($Bin(a=12,p)-LNorm(\mu,\sigma=1)$)'),
TeX(r'($Bin(a=12,p)-LNorm(\mu=0,\sigma)$)'),
TeX(r'($Geom(p)-Gam(\alpha,\beta=1)$)'),
TeX(r'($Geom(p)-LNorm(\mu,\sigma=1)$)'),
TeX(r'($Geom(p)-LNorm(\mu=0,\sigma)$)'),
TeX(r'($Pois(\lambda)-Gam(\alpha,\beta=1)$)'),
TeX(r'($Pois(\lambda)-LNorm(\mu,\sigma=1)$)'),
TeX(r'($Pois(\lambda)-LNorm(\mu=0,\sigma)$)'))
i <- 1
for(quantity in colnames(posterior_predictive_distribution)[2:6]){
(post_boxplot <- ggplot(data = posterior_predictive_distribution) +
geom_boxplot(mapping = aes(y = eval(parse(text=quantity)) , x = as.factor(model))) +
theme_classic(base_size = 20)+ labs(x= "",  title = quantity_titles[i], y = "") +
scale_x_discrete(labels= x_ticks) +
theme(axis.text.x = element_text(angle = 75, vjust = 1, hjust=1, size = 14)))
i <- i+1
ggsave(paste0("../paper/figures/post_boxplot_real_data_",quantity, ".pdf"), post_boxplot)
}
library(latex2exp)
TeX(r'($Bin(a=12,p)-Gam(\alpha,\beta=1)$)')
quantity <- colnames(posterior_predictive_distribution)[2:6][1]
quantity_titles <- c("Claim Frequency", "Claim Amount", "P(N=0)", "Total Claim Amount","Loss Ratio" )
x_ticks <- c(TeX(r'($Bin(a=12,p)-Gam(\alpha,\beta=1)$)'),
TeX(r'($Bin(a=12,p)-LNorm(\mu,\sigma=1)$)'),
TeX(r'($Bin(a=12,p)-LNorm(\mu=0,\sigma)$)'),
TeX(r'($Geom(p)-Gam(\alpha,\beta=1)$)'),
TeX(r'($Geom(p)-LNorm(\mu,\sigma=1)$)'),
TeX(r'($Geom(p)-LNorm(\mu=0,\sigma)$)'),
TeX(r'($Pois(\lambda)-Gam(\alpha,\beta=1)$)'),
TeX(r'($Pois(\lambda)-LNorm(\mu,\sigma=1)$)'),
TeX(r'($Pois(\lambda)-LNorm(\mu=0,\sigma)$)'))
i <- 1
for(quantity in colnames(posterior_predictive_distribution)[2:6]){
(post_boxplot <- ggplot(data = posterior_predictive_distribution) +
geom_boxplot(mapping = aes(y = eval(parse(text=quantity)) , x = as.factor(model))) +
theme_classic(base_size = 20)+ labs(x= "",  title = quantity_titles[i], y = "") +
scale_x_discrete(labels= x_ticks) +
theme(axis.text.x = element_text(angle = 75, vjust = 1, hjust=1, size = 16)))
i <- i+1
ggsave(paste0("../paper/figures/post_boxplot_real_data_",quantity, ".pdf"), post_boxplot)
}
k<- 3
last_cloud <- extract_last_cloud(res_abc_list[[k]])
last_cloud
k<- 2
last_cloud <- extract_last_cloud(res_abc_list[[k]])
last_cloud
k<- 6
last_cloud <- extract_last_cloud(res_abc_list[[k]])
last_cloud
k<- 8
last_cloud <- extract_last_cloud(res_abc_list[[k]])
last_cloud
pst_estimates <- compute_metric_cloud(data, p_p, loss_models[[k]], last_cloud)$estimates
pst_estimates <- compute_metric_cloud(data, p_p, loss_models[[k]], last_cloud)$estimates
cbind(pst_estimates, as.data.frame(last_cloud)[c("p", "sigma")])
map <- t(as.matrix(colMeans(extract_last_cloud(res_abc_list[[k]]))))
compute_metric_particle(data, p_p, loss_models[[k]], map, method = "map")$estimates
compute_metric_particle(data, p_p, loss_models[[k]], map, method = "map")$estimates
compute_metric_particle(data, p_p, loss_models[[k]], map, method = "map")$estimates
compute_metric_particle(data, p_p, loss_models[[k]], map, method = "map")$estimates
compute_metric_particle(data, p_p, loss_models[[k]], map, method = "map")$estimates
compute_metric_particle(data, p_p, loss_models[[k]], map, method = "map")$estimates
compute_metric_particle(data, p_p, loss_models[[k]], map, method = "map")$estimates
compute_metric_particle(data, p_p, loss_models[[k]], map, method = "map")$estimates
compute_metric_particle(data, p_p, loss_models[[k]], map, method = "map")$estimates
compute_metric_particle(data, p_p, loss_models[[k]], map, method = "map")$estimates
compute_metric_particle(data, p_p, loss_models[[k]], map, method = "map")$estimates
compute_metric_particle(data, p_p, loss_models[[k]], map, method = "map")$estimates
library(latex2exp)
TeX(r'($Bin(a=12,p)-Gam(\alpha,\beta=1)$)')
quantity <- colnames(posterior_predictive_distribution)[2:6][1]
quantity_titles <- c("Claim Frequency", "Claim Amount", "P(N=0)", "Total Claim Amount","Loss Ratio" )
x_ticks <- c(TeX(r'($Bin(a=12,p)-Gam(\alpha,\beta=1)$)'),
TeX(r'($Bin(a=12,p)-LNorm(\mu,\sigma=1)$)'),
TeX(r'($Bin(a=12,p)-LNorm(\mu=0,\sigma)$)'),
TeX(r'($Geom(p)-Gam(\alpha,\beta=1)$)'),
TeX(r'($Geom(p)-LNorm(\mu,\sigma=1)$)'),
TeX(r'($Geom(p)-LNorm(\mu=0,\sigma)$)'),
TeX(r'($Pois(\lambda)-Gam(\alpha,\beta=1)$)'),
TeX(r'($Pois(\lambda)-LNorm(\mu,\sigma=1)$)'),
TeX(r'($Pois(\lambda)-LNorm(\mu=0,\sigma)$)'))
i <- 1
for(quantity in colnames(posterior_predictive_distribution)[2:6]){
(post_boxplot <- ggplot(data = posterior_predictive_distribution) +
geom_boxplot(mapping = aes(x = eval(parse(text=quantity)) , y = as.factor(model))) +
theme_classic(base_size = 20)+ labs(x= "",  title = quantity_titles[i], y = "") +
scale_y_discrete(labels= x_ticks) +
theme(axis.text.x = element_text(angle = 75, vjust = 1, hjust=1, size = 16)))
i <- i+1
ggsave(paste0("../paper/figures/post_boxplot_real_data_",quantity, ".pdf"), post_boxplot)
}
library(latex2exp)
TeX(r'($Bin(a=12,p)-Gam(\alpha,\beta=1)$)')
quantity <- colnames(posterior_predictive_distribution)[2:6][1]
quantity_titles <- c("Claim Frequency", "Claim Amount", "P(N=0)", "Total Claim Amount","Loss Ratio" )
x_ticks <- c(TeX(r'($Bin(a=12,p)-Gam(\alpha,\beta=1)$)'),
TeX(r'($Bin(a=12,p)-LNorm(\mu,\sigma=1)$)'),
TeX(r'($Bin(a=12,p)-LNorm(\mu=0,\sigma)$)'),
TeX(r'($Geom(p)-Gam(\alpha,\beta=1)$)'),
TeX(r'($Geom(p)-LNorm(\mu,\sigma=1)$)'),
TeX(r'($Geom(p)-LNorm(\mu=0,\sigma)$)'),
TeX(r'($Pois(\lambda)-Gam(\alpha,\beta=1)$)'),
TeX(r'($Pois(\lambda)-LNorm(\mu,\sigma=1)$)'),
TeX(r'($Pois(\lambda)-LNorm(\mu=0,\sigma)$)'))
i <- 1
for(quantity in colnames(posterior_predictive_distribution)[2:6]){
(post_boxplot <- ggplot(data = posterior_predictive_distribution) +
geom_boxplot(mapping = aes(x = eval(parse(text=quantity)) , y = as.factor(model))) +
theme_classic(base_size = 20)+ labs(x= "",  title = quantity_titles[i], y = "") +
scale_y_discrete(labels= x_ticks) +
theme(axis.text.x = element_text(vjust = 1, hjust=1, size = 16)))
i <- i+1
ggsave(paste0("../paper/figures/post_boxplot_real_data_",quantity, ".pdf"), post_boxplot)
}
library(latex2exp)
TeX(r'($Bin(a=12,p)-Gam(\alpha,\beta=1)$)')
quantity <- colnames(posterior_predictive_distribution)[2:6][1]
quantity_titles <- c("Claim Frequency", "Claim Amount", "P(N=0)", "Total Claim Amount","Loss Ratio" )
x_ticks <- c(TeX(r'($Bin(a=12,p)-Gam(\alpha,\beta=1)$)'),
TeX(r'($Bin(a=12,p)-LNorm(\mu,\sigma=1)$)'),
TeX(r'($Bin(a=12,p)-LNorm(\mu=0,\sigma)$)'),
TeX(r'($Geom(p)-Gam(\alpha,\beta=1)$)'),
TeX(r'($Geom(p)-LNorm(\mu,\sigma=1)$)'),
TeX(r'($Geom(p)-LNorm(\mu=0,\sigma)$)'),
TeX(r'($Pois(\lambda)-Gam(\alpha,\beta=1)$)'),
TeX(r'($Pois(\lambda)-LNorm(\mu,\sigma=1)$)'),
TeX(r'($Pois(\lambda)-LNorm(\mu=0,\sigma)$)'))
i <- 1
for(quantity in colnames(posterior_predictive_distribution)[2:6]){
(post_boxplot <- ggplot(data = posterior_predictive_distribution) +
geom_boxplot(mapping = aes(x = eval(parse(text=quantity)) , y = as.factor(model))) +
theme_classic(base_size = 20)+ labs(x= "",  title = quantity_titles[i], y = "") +
scale_y_discrete(labels= x_ticks) +
theme(axis.text.x = element_text(size = 16)))
i <- i+1
ggsave(paste0("../paper/figures/post_boxplot_real_data_",quantity, ".pdf"), post_boxplot)
}
knitr::opts_chunk$set(echo = TRUE)
library(latex2exp)
library(IsoPriceR)
library(ggplot2)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
load("../data/data_sim.RData")
load("../data/res_abc_sim.RData")
res_abc_sim <- res_abc
data_sim <- data
# best_clouds <- lapply(res_abc_sim, function(res_abc) extract_best_cloud(res_abc))
best_clouds <- lapply(res_abc_sim, function(res_abc) extract_last_cloud(res_abc))
best_cloud_df <- data.frame()
max(res_abc_sim[[1]]$ds[[length(res_abc_sim[[1]]$ds)]]);max(res_abc_sim[[2]]$ds[[length(res_abc_sim[[2]]$ds)]])
for(k in 1:length(ns)){
best_cloud <- as.data.frame(best_clouds[[k]])
best_cloud["ss"] <- ns[k]
best_cloud_df <- rbind(best_cloud_df, best_cloud)
}
library(kableExtra)
library(ggplot2)
library(dplyr)
library(tidyr)
library(rstudioapi)
library(IsoPriceR)
library(readr)
library(xtable)
setwd(dirname(getActiveDocumentContext()$path))
getwd()
library(kableExtra)
library(ggplot2)
library(dplyr)
library(tidyr)
library(rstudioapi)
library(IsoPriceR)
library(readr)
library(xtable)
setwd(dirname(getActiveDocumentContext()$path))
getwd()
#One simulation for the fun to superpose the posterior distributions
# Data ----
pet_insurance_FR <- read_csv("../data/pet_insurance_FR.csv")
data_pet_insurance <- data.frame(carrier = pet_insurance_FR$Company, race = pet_insurance_FR$Race,
r = as.numeric(sub("%", "", pet_insurance_FR$rate))/100,
d = pet_insurance_FR$deductible,
l = pet_insurance_FR$limit,
x = pet_insurance_FR$Premium)
# Sample sizes----
ns <- c( 50, 100, 250, 500)
# ns <- c(50)
# Premium an loss model Settings ----
p_p <- pure_premium("xs", c("r", "d", "l"))
freq_dist <- model("poisson", c("lambda"))
sev_dist <- model("lognormal", c("mu", "sigma"))
l_m <- loss_model(freq_dist, sev_dist, "Lognormal(mu, sigma = 1)-Poisson(lambda)")
# True parameters of the loss model ----
lambda_true <- 0.58; mu_true <- 5.75; sigma_true <- 1
true_parms <- t(as.matrix(c(lambda_true, mu_true, sigma_true)))
colnames(true_parms) <- l_m$parm_names
# Prior assumptions----
prior_lambda <- prior_dist("uniform", "lambda",c(0, 10))
prior_mu <- prior_dist("uniform", "mu",c(-10, 10))
prior_sigma <- prior_dist("constant", "sigma", c(1))
prior_distributions <- list(prior_lambda, prior_mu, prior_sigma)
model_prior <- independent_priors(prior_distributions)
#
set.seed(12345)
# Fake Data
# d <- sample(data_pet_insurance$d, max(ns), replace = TRUE)
# l <- sample(data_pet_insurance$l, max(ns), replace = TRUE)
# r <- sample(data_pet_insurance$r, max(ns), replace = TRUE)
# th_premium <- matrix(c(r, d, l), nrow = max(ns))
# data <- as.data.frame(th_premium); colnames(data) <- p_p$parm_names
# X_true <- sample_X(l_m, true_parms, R = 10000)
# data["pp"] <- compute_pure_premia(X_true, coverage_type = "xs", th_premium)
# lr <- runif(max(ns) ,0.4, 0.7)
# data["x"] <- data["pp"] / lr
# popSize=1000;  MC_R=2000; acc = 1; sp_bounds = c(0.4, 0.7)
# res_abc <- lapply(ns, function(n) abc(data[1:n,], model_prior, l_m, p_p, popSize,  MC_R, acc, sp_bounds))
# save(data, file = "../data/data_sim.RData")
# save(res_abc, file = "../data/res_abc_sim.RData")
load("../data/data_sim.RData")
load("../data/res_abc_sim.RData")
res_abc_sim <- res_abc
data_sim <- data
# best_clouds <- lapply(res_abc_sim, function(res_abc) extract_best_cloud(res_abc))
best_clouds <- lapply(res_abc_sim, function(res_abc) extract_last_cloud(res_abc))
best_cloud_df <- data.frame()
max(res_abc_sim[[1]]$ds[[length(res_abc_sim[[1]]$ds)]]);max(res_abc_sim[[2]]$ds[[length(res_abc_sim[[2]]$ds)]])
for(k in 1:length(ns)){
best_cloud <- as.data.frame(best_clouds[[k]])
best_cloud["ss"] <- ns[k]
best_cloud_df <- rbind(best_cloud_df, best_cloud)
}
(post_lambda <- ggplot2::ggplot(best_cloud_df) + ggplot2::geom_density(mapping = aes(x= lambda, group = as.factor(ss) , color = as.factor(ss))) +   ggplot2::geom_vline(ggplot2::aes(xintercept=lambda_true),color="black", linetype="dashed") + ggplot2::labs(x= TeX(r'($\lambda$)', color = "Sample size", y = "") + ggplot2::theme_classic(base_size = 20) + ggplot2::theme(legend.position="right"))
ggsave("../paper/figures/post_lambda_sim_1.pdf", post_lambda)
load("../data/data_sim.RData")
load("../data/res_abc_sim.RData")
res_abc_sim <- res_abc
data_sim <- data
# best_clouds <- lapply(res_abc_sim, function(res_abc) extract_best_cloud(res_abc))
best_clouds <- lapply(res_abc_sim, function(res_abc) extract_last_cloud(res_abc))
best_cloud_df <- data.frame()
max(res_abc_sim[[1]]$ds[[length(res_abc_sim[[1]]$ds)]]);max(res_abc_sim[[2]]$ds[[length(res_abc_sim[[2]]$ds)]])
for(k in 1:length(ns)){
best_cloud <- as.data.frame(best_clouds[[k]])
best_cloud["ss"] <- ns[k]
best_cloud_df <- rbind(best_cloud_df, best_cloud)
}
(post_lambda <- ggplot2::ggplot(best_cloud_df) + ggplot2::geom_density(mapping = aes(x= lambda, group = as.factor(ss) , color = as.factor(ss))) +   ggplot2::geom_vline(ggplot2::aes(xintercept=lambda_true),color="black", linetype="dashed") + ggplot2::labs(x= TeX(r'($\lambda$)'), color = "Sample size", y = "") + ggplot2::theme_classic(base_size = 20) + ggplot2::theme(legend.position="right"))
ggsave("../paper/figures/post_lambda_sim_1.pdf", post_lambda)
(post_mu <- ggplot2::ggplot(best_cloud_df) + ggplot2::geom_density(mapping = aes(x= mu, group = as.factor(ss) , color = as.factor(ss))) +   ggplot2::geom_vline(ggplot2::aes(xintercept=mu_true),color="black", linetype="dashed") + ggplot2::labs(x= "mu", color = "Sample size",  y = "") + ggplot2::theme_classic(base_size = 20) + ggplot2::theme(legend.position="right"))
ggsave("../paper/figures/post_mu_sim_1.pdf", post_mu)
load("../data/data_sim.RData")
load("../data/res_abc_sim.RData")
res_abc_sim <- res_abc
data_sim <- data
# best_clouds <- lapply(res_abc_sim, function(res_abc) extract_best_cloud(res_abc))
best_clouds <- lapply(res_abc_sim, function(res_abc) extract_last_cloud(res_abc))
best_cloud_df <- data.frame()
max(res_abc_sim[[1]]$ds[[length(res_abc_sim[[1]]$ds)]]);max(res_abc_sim[[2]]$ds[[length(res_abc_sim[[2]]$ds)]])
for(k in 1:length(ns)){
best_cloud <- as.data.frame(best_clouds[[k]])
best_cloud["ss"] <- ns[k]
best_cloud_df <- rbind(best_cloud_df, best_cloud)
}
(post_lambda <- ggplot2::ggplot(best_cloud_df) + ggplot2::geom_density(mapping = aes(x= lambda, group = as.factor(ss) , color = as.factor(ss))) +   ggplot2::geom_vline(ggplot2::aes(xintercept=lambda_true),color="black", linetype="dashed") + ggplot2::labs(x= TeX(r'($\lambda$)'), color = "Sample size", y = "") + ggplot2::theme_classic(base_size = 20) + ggplot2::theme(legend.position="right"))
ggsave("../paper/figures/post_lambda_sim_1.pdf", post_lambda)
(post_mu <- ggplot2::ggplot(best_cloud_df) + ggplot2::geom_density(mapping = aes(x= mu, group = as.factor(ss) , color = as.factor(ss))) +   ggplot2::geom_vline(ggplot2::aes(xintercept=mu_true),color="black", linetype="dashed") + ggplot2::labs(x= TeX(r'($\mu$)'), color = "Sample size",  y = "") + ggplot2::theme_classic(base_size = 20) + ggplot2::theme(legend.position="right"))
ggsave("../paper/figures/post_mu_sim_1.pdf", post_mu)
# post_metrics_df <- data.frame()
#
# for(k in 1:length(ns)){
#   best_cloud <- best_clouds[[k]]
#   res <- compute_metric_cloud(data[1:ns[k],], p_p, l_m, best_cloud)$estimates
#   res["ss"] <- ns[k]
#   post_metrics_df <- rbind(post_metrics_df, res)
# }
# save(post_metrics_df, file = "../data/post_metrics_df_sim_1.RData")
load("../data/post_metrics_df_sim_1.RData")
quantity_true <- compute_metric_particle(data, p_p, l_m, true_parms, method = "none")$estimates
quantity_true <- quantity_true %>% mutate(parm_values = ifelse(parm_names == "LR", 0.55, parm_values))
quantity_titles <- c(  "Claim Frequency","Claim Amount","P(N=0)", "Total Claim Amount","Loss Ratio" )
i <- 1
quantity <- colnames(post_metrics_df)[2:6][i]
for(quantity in colnames(post_metrics_df)[2:6]){
(post_boxplot <- ggplot(data = post_metrics_df %>% select(quantity, ss)) +
geom_boxplot(mapping = aes(y = eval(parse(text=quantity)) , x = as.factor(ss), color = as.factor(ss))) +
geom_hline(data = quantity_true %>%filter(parm_names == quantity) ,aes(yintercept=parm_values),
color="black", linetype="dashed") +
theme_classic(base_size = 20) + theme(legend.position="right") + labs(x= "Sample size",  title = quantity_titles[i], y = "", color = "Sample size"))
i <- i+1
ggsave(paste0("../paper/figures/post_boxplot_simu_1_",quantity, ".pdf"), post_boxplot)
}
# The result coming from the server
df_sim <- read_csv("../data/res_sim.csv")
parm_true <- t(as.matrix(c(lambda_true, mu_true, sigma_true)))
names(parm_true) <- l_m$parm_names
quantity_true <- compute_metric_particle(data, p_p, l_m, true_parms, method = "none")$estimates
quantity_true <- quantity_true %>% mutate(parm_values = ifelse(parm_names == "LR", 0.55, parm_values))
quantity_titles <- c("Lambda", "Mu", "Sigma", "P(N=0)", "Loss Ratio", "Claim Frequency", "Claim Amount", "Total Claim Amount" )
i   <- 8
quantity <- quantity_true$parm_names[i]
for(quantity in quantity_true$parm_names){
(post_boxplot <- ggplot(data = df_sim %>% filter(parm_names == quantity)) + geom_boxplot(mapping = aes(y = parm_values, x = as.factor(ss), color = method)) + ggplot2::geom_hline(data = quantity_true %>%filter(parm_names == quantity) ,ggplot2::aes(yintercept=parm_values),color="black", linetype="dashed") + ggplot2::theme_classic(base_size = 20) + ggplot2::theme(legend.position="right") + ggplot2::labs(x= "Sample size", color = "",  title = quantity_titles[i], y = ""))
i <- i + 1
ggsave(paste0("../paper/figures/post_boxplot_simu_All_",quantity, ".pdf"), post_boxplot)
}
# The result coming from the server
df_sim <- read_csv("../data/res_sim.csv")
parm_true <- t(as.matrix(c(lambda_true, mu_true, sigma_true)))
names(parm_true) <- l_m$parm_names
quantity_true <- compute_metric_particle(data, p_p, l_m, true_parms, method = "none")$estimates
quantity_true <- quantity_true %>% mutate(parm_values = ifelse(parm_names == "LR", 0.55, parm_values))
quantity_titles <- c(TeX(r'($\lambda$)'), TeX(r'($\mu$)'), "Sigma", "P(N=0)", "Loss Ratio", "Claim Frequency", "Claim Amount", "Total Claim Amount" )
i   <- 8
quantity <- quantity_true$parm_names[i]
for(quantity in quantity_true$parm_names){
(post_boxplot <- ggplot(data = df_sim %>% filter(parm_names == quantity)) + geom_boxplot(mapping = aes(y = parm_values, x = as.factor(ss), color = method)) + ggplot2::geom_hline(data = quantity_true %>%filter(parm_names == quantity) ,ggplot2::aes(yintercept=parm_values),color="black", linetype="dashed") + ggplot2::theme_classic(base_size = 20) + ggplot2::theme(legend.position="right") + ggplot2::labs(x= "Sample size", color = "",  title = quantity_titles[i], y = ""))
i <- i + 1
ggsave(paste0("../paper/figures/post_boxplot_simu_All_",quantity, ".pdf"), post_boxplot)
}
# The result coming from the server
df_sim <- read_csv("../data/res_sim.csv")
parm_true <- t(as.matrix(c(lambda_true, mu_true, sigma_true)))
names(parm_true) <- l_m$parm_names
quantity_true <- compute_metric_particle(data, p_p, l_m, true_parms, method = "none")$estimates
quantity_true <- quantity_true %>% mutate(parm_values = ifelse(parm_names == "LR", 0.55, parm_values))
quantity_titles <- c(TeX(r'($\lambda$)'), TeX(r'($\mu$)'), "Sigma", "P(N=0)", "Loss Ratio", "Claim Frequency", "Claim Amount", "Total Claim Amount" )
i   <- 8
quantity <- quantity_true$parm_names[i]
for(quantity in quantity_true$parm_names){
(post_boxplot <- ggplot(data = df_sim %>% filter(parm_names == quantity)) + geom_boxplot(mapping = aes(y = parm_values, x = as.factor(ss), color = method)) + ggplot2::geom_hline(data = quantity_true %>%filter(parm_names == quantity) ,ggplot2::aes(yintercept=parm_values),color="black", linetype="dashed") + ggplot2::theme_classic(base_size = 20) + ggplot2::theme(legend.position="right") + ggplot2::labs(x= "Sample size", color = "",  title = quantity_titles[i], y = ""))
i <- i + 1
ggsave(paste0("../paper/figures/post_boxplot_simu_All_",quantity, ".pdf"), post_boxplot)
}
i   <- 8
quantity <- quantity_true$parm_names[i]
quantity
# The result coming from the server
df_sim <- read_csv("../data/res_sim.csv")
parm_true <- t(as.matrix(c(lambda_true, mu_true, sigma_true)))
names(parm_true) <- l_m$parm_names
quantity_true <- compute_metric_particle(data, p_p, l_m, true_parms, method = "none")$estimates
quantity_true <- quantity_true %>% mutate(parm_values = ifelse(parm_names == "LR", 0.55, parm_values))
quantity_titles <- c(TeX(r'($\lambda$)'), TeX(r'($\mu$)'), "Sigma", "P(N=0)", "Loss Ratio", "Claim Frequency", "Claim Amount", "Total Claim Amount" )
i   <- 1
quantity <- quantity_true$parm_names[i]
for(quantity in quantity_true$parm_names){
(post_boxplot <- ggplot(data = df_sim %>% filter(parm_names == quantity)) + geom_boxplot(mapping = aes(y = parm_values, x = as.factor(ss), color = method)) + ggplot2::geom_hline(data = quantity_true %>%filter(parm_names == quantity) ,ggplot2::aes(yintercept=parm_values),color="black", linetype="dashed") + ggplot2::theme_classic(base_size = 20) + ggplot2::theme(legend.position="right") + ggplot2::labs(x= "Sample size", color = "",  title = quantity_titles[i], y = ""))
i <- i + 1
ggsave(paste0("../paper/figures/post_boxplot_simu_All_",quantity, ".pdf"), post_boxplot)
}
