independent_priors(list(prior_a, prior_p, prior_alpha, prior_beta_c)),
independent_priors(list(prior_b, prior_p, prior_alpha, prior_beta_c)),
independent_priors(list(prior_lambda, prior_mu_c, prior_sigma)),
independent_priors(list(prior_a, prior_p, prior_mu_c, prior_sigma)),
independent_priors(list(prior_b, prior_p, prior_mu_c, prior_sigma))
)
iso_df <- data.frame()
k <- 1
names(res_abc_list) <- model_names
load("../data/res_abc_real_data_section53.RData")
names(res_abc_list) <- model_names
model_names_s <- c("Pois(lambda)-Lognormal(mu,sigma=1)", "Pois(lambda)-Gamma(alpha,beta=1)", "Pois(lambda)-Lognormal(mu=0,sigma)")
for(k in 1:length(res_abc_list)){
if(names(res_abc_list[k]) %in% model_names_s){
map <- t(as.matrix(colMeans(extract_last_cloud(res_abc_list[[k]]))))
pp <- compute_metric_particle(data, p_p, loss_models[[k]], map, method = "map")$pp
# mode <- t(as.matrix(extract_mode(res_abc_list[[k]], loss_models[[k]], prior_distributions[[k]])))
# pp <- compute_metric_particle(data, p_p, loss_models[[k]], mode, method = "mode")$pp
res_iso <- isoreg(pp, data$x)
iso_df <- rbind(iso_df,
data.frame(model = rep(loss_models[[k]]$model_name, nrow(data)), x= sort(res_iso$x), y = res_iso$yf))
}
}
(iso_plot <- ggplot(data = iso_df) + geom_step(mapping = aes(x= x, y = y, color = model)) +  ggplot2::theme_classic(base_size = 14) + labs(x= "Pure premium", y = "Commercial premium", title = "", color = "Models") + theme(legend.position="top"))
(iso_plot <- ggplot(data = iso_df) + geom_step(mapping = aes(x= x, y = y, color = model)) +  ggplot2::theme_classic(base_size = 14) + labs(x= "Pure premium", title = "Commercial premium", y = "", color = "Models") + theme(legend.position="bottom"))
(iso_plot <- ggplot(data = iso_df) + geom_step(mapping = aes(x= x, y = y, color = model)) +  ggplot2::theme_classic(base_size = 14) + labs(x= "Pure premium", title = "Commercial premium", y = "", color = "Models") + theme(legend.position="right"))
(iso_plot <- ggplot(data = iso_df) + geom_step(mapping = aes(x= x, y = y, color = model)) +  ggplot2::theme_classic(base_size = 14) + labs(x= "Pure premium", title = "Commercial premium", y = "", color = "Models") + theme(legend.position="bottom"))
model_names_latex <- c(
expression(Pois(lambda) - Lognormal(mu, sigma == 1)),
expression(Pois(lambda) - Gamma(alpha, beta == 1)),
expression(Pois(lambda) - Lognormal(mu == 0, sigma))
)
# Associer les modèles longs à leurs versions LaTeX
names(model_names_latex) <- c(
"Pois(lambda)-Lognormal(mu,sigma=1)",
"Pois(lambda)-Gamma(alpha,beta=1)",
"Pois(lambda)-Lognormal(mu=0,sigma)"
)
for(k in 1:length(res_abc_list)){
if(names(res_abc_list[k]) %in% model_names_s){
map <- t(as.matrix(colMeans(extract_last_cloud(res_abc_list[[k]]))))
pp <- compute_metric_particle(data, p_p, loss_models[[k]], map, method = "map")$pp
# mode <- t(as.matrix(extract_mode(res_abc_list[[k]], loss_models[[k]], prior_distributions[[k]])))
# pp <- compute_metric_particle(data, p_p, loss_models[[k]], mode, method = "mode")$pp
res_iso <- isoreg(pp, data$x)
iso_df <- rbind(iso_df,
data.frame(model = rep(loss_models[[k]]$model_name, nrow(data)), x= sort(res_iso$x), y = res_iso$yf))
}
}
iso_df$model <- model_names_latex[iso_df$model]
iso_df
model_names_latex[iso_df$model]
model_names_latex
iso_df$model
iso_df <- data.frame()
k <- 1
names(res_abc_list) <- model_names
model_names_latex <- c(
expression(Pois(lambda) - Lognormal(mu, sigma == 1)),
expression(Pois(lambda) - Gamma(alpha, beta == 1)),
expression(Pois(lambda) - Lognormal(mu == 0, sigma))
)
# Associer les modèles longs à leurs versions LaTeX
names(model_names_latex) <- c(
"Pois(lambda)-Lognormal(mu,sigma=1)",
"Pois(lambda)-Gamma(alpha,beta=1)",
"Pois(lambda)-Lognormal(mu=0,sigma)"
)
for(k in 1:length(res_abc_list)){
if(names(res_abc_list[k]) %in% model_names_s){
map <- t(as.matrix(colMeans(extract_last_cloud(res_abc_list[[k]]))))
pp <- compute_metric_particle(data, p_p, loss_models[[k]], map, method = "map")$pp
# mode <- t(as.matrix(extract_mode(res_abc_list[[k]], loss_models[[k]], prior_distributions[[k]])))
# pp <- compute_metric_particle(data, p_p, loss_models[[k]], mode, method = "mode")$pp
res_iso <- isoreg(pp, data$x)
iso_df <- rbind(iso_df,
data.frame(model = rep(loss_models[[k]]$model_name, nrow(data)), x= sort(res_iso$x), y = res_iso$yf))
}
}
iso_df
iso_df$model
model_names_latex
model_names_latex <- c(
expression(Pois(lambda) - Lognormal(mu, sigma == 1)),
expression(Pois(lambda) - Gamma(alpha, beta == 1)),
expression(Pois(lambda) - Lognormal(mu == 0, sigma))
)
# Associer les modèles longs à leurs versions LaTeX
names(model_names_latex) <- c(
"Pois(lambda)-Lognormal(mu,sigma=1)",
"Pois(lambda)-Gamma(alpha,beta=1)",
"Pois(lambda)-Lognormal(mu=0,sigma)"
)
model_names_latex
iso_df$model <- model_names_latex[iso_df$model]
iso_df
(iso_plot <- ggplot(data = iso_df) + geom_step(mapping = aes(x= x, y = y, color = model)) +  ggplot2::theme_classic(base_size = 14) + labs(x= "Pure premium", title = "Commercial premium", y = "", color = "Models") + theme(legend.position="bottom"))
latex_labels <- c(
expression(Pois(lambda) ~ "- Lognormal(" * mu * ", " * sigma == 1 * ")"),
expression(Pois(lambda) ~ "- Gamma(" * alpha * ", " * beta == 1 * ")"),
expression(Pois(lambda) ~ "- Lognormal(" * mu == 0 * ", " * sigma * ")")
)
(iso_plot <- ggplot(data = iso_df) + geom_step(mapping = aes(x= x, y = y, color = model)) +  ggplot2::theme_classic(base_size = 14) + labs(x= "Pure premium", title = "Commercial premium", y = "", color = "Models") +
scale_color_manual(
values = c("blue", "red", "green"), # Couleurs arbitraires
labels = latex_labels
) +  theme(legend.position="bottom"))
iso_df <- data.frame()
k <- 1
names(res_abc_list) <- model_names
latex_labels <- c(
expression(Pois(lambda) ~ "- Lognormal(" * mu * ", " * sigma == 1 * ")"),
expression(Pois(lambda) ~ "- Gamma(" * alpha * ", " * beta == 1 * ")"),
expression(Pois(lambda) ~ "- Lognormal(" * mu == 0 * ", " * sigma * ")")
)
for(k in 1:length(res_abc_list)){
if(names(res_abc_list[k]) %in% model_names_s){
map <- t(as.matrix(colMeans(extract_last_cloud(res_abc_list[[k]]))))
pp <- compute_metric_particle(data, p_p, loss_models[[k]], map, method = "map")$pp
# mode <- t(as.matrix(extract_mode(res_abc_list[[k]], loss_models[[k]], prior_distributions[[k]])))
# pp <- compute_metric_particle(data, p_p, loss_models[[k]], mode, method = "mode")$pp
res_iso <- isoreg(pp, data$x)
iso_df <- rbind(iso_df,
data.frame(model = rep(loss_models[[k]]$model_name, nrow(data)), x= sort(res_iso$x), y = res_iso$yf))
}
}
iso_df$model <- model_names_latex[iso_df$model]
(iso_plot <- ggplot(data = iso_df) + geom_step(mapping = aes(x= x, y = y, color = model)) +  ggplot2::theme_classic(base_size = 14) + labs(x= "Pure premium", title = "Commercial premium", y = "", color = "Models") +
scale_color_manual(
values = c("blue", "red", "green"), # Couleurs arbitraires
labels = latex_labels
) +  theme(legend.position="bottom"))
iso_df <- data.frame()
names(res_abc_list) <- model_names
latex_labels <- c(
expression(Pois(lambda) ~ "- Lognormal(" * mu * ", " * sigma == 1 * ")"),
expression(Pois(lambda) ~ "- Gamma(" * alpha * ", " * beta == 1 * ")"),
expression(Pois(lambda) ~ "- Lognormal(" * mu == 0 * ", " * sigma * ")")
)
for(k in 1:length(res_abc_list)){
if(names(res_abc_list[k]) %in% model_names_s){
map <- t(as.matrix(colMeans(extract_last_cloud(res_abc_list[[k]]))))
pp <- compute_metric_particle(data, p_p, loss_models[[k]], map, method = "map")$pp
# mode <- t(as.matrix(extract_mode(res_abc_list[[k]], loss_models[[k]], prior_distributions[[k]])))
# pp <- compute_metric_particle(data, p_p, loss_models[[k]], mode, method = "mode")$pp
res_iso <- isoreg(pp, data$x)
iso_df <- rbind(iso_df,
data.frame(model = rep(loss_models[[k]]$model_name, nrow(data)), x= sort(res_iso$x), y = res_iso$yf))
}
}
(iso_plot <- ggplot(data = iso_df) + geom_step(mapping = aes(x= x, y = y, color = model)) +  ggplot2::theme_classic(base_size = 14) + labs(x= "Pure premium", title = "Commercial premium", y = "", color = "Models") +
scale_color_manual(
values = c("blue", "red", "green"), # Couleurs arbitraires
labels = latex_labels
) +  theme(legend.position="bottom"))
(iso_plot <- ggplot(data = iso_df) + geom_step(mapping = aes(x= x, y = y, color = model)) +  ggplot2::theme_classic(base_size = 14) + labs(x= "Pure premium", title = "Commercial premium", y = "", color = "Models") +
scale_color_manual(
values = c("blue", "red", "green"), # Couleurs arbitraires
labels = latex_labels
) +  theme(legend.position="right"))
ggsave("../figures/iso_real_data_all_models.pdf", iso_plot)
iso_df <- data.frame()
names(res_abc_list) <- model_names
latex_labels <- c(
expression(Pois(lambda) ~ "- Lognormal(" * mu * ", " * sigma == 1 * ")"),
expression(Pois(lambda) ~ "- Gamma(" * alpha * ", " * beta == 1 * ")"),
expression(Pois(lambda) ~ "- Lognormal(" * mu == 0 * ", " * sigma * ")")
)
for(k in 1:length(res_abc_list)){
if(names(res_abc_list[k]) %in% model_names_s){
map <- t(as.matrix(colMeans(extract_last_cloud(res_abc_list[[k]]))))
pp <- compute_metric_particle(data, p_p, loss_models[[k]], map, method = "map")$pp
# mode <- t(as.matrix(extract_mode(res_abc_list[[k]], loss_models[[k]], prior_distributions[[k]])))
# pp <- compute_metric_particle(data, p_p, loss_models[[k]], mode, method = "mode")$pp
res_iso <- isoreg(pp, data$x)
iso_df <- rbind(iso_df,
data.frame(model = rep(loss_models[[k]]$model_name, nrow(data)), x= sort(res_iso$x), y = res_iso$yf))
}
}
(iso_plot <- ggplot(data = iso_df) + geom_step(mapping = aes(x= x, y = y, color = model)) +  ggplot2::theme_classic(base_size = 14) + labs(x= "Pure premium", title = "Commercial premium", y = "", color = "Models") +
scale_color_manual(
values = c("blue", "red", "green"), # Couleurs arbitraires
labels = latex_labels
) +  theme(legend.position="bottom"))
ggsave("../figures/iso_real_data_all_models.pdf", iso_plot)
loss_model_names <- sapply(1:9, function(k) loss_models[[k]]$model_name)
k <- 1
res_abc_pois_lnorm_sigma1 <- res_abc_list[[k]]
last_cloud <- extract_last_cloud(res_abc_list[[k]])
map <- t(as.matrix(colMeans(last_cloud)))
pp_pois_lnorm_sigma1 <- compute_metric_particle(data, p_p, loss_models[[k]], map)$pp
data["pp"] <- pp_pois_lnorm_sigma1
res_iso <- isoreg(pp_pois_lnorm_sigma1, data$x)
iso_df <-data.frame(model = rep(loss_models[[k]]$model_name, nrow(data)), x= sort(res_iso$x), y = res_iso$yf)
(ggplot() + geom_point(data = data, mapping = aes(x = pp, y = x, color = as.factor(insurance_carrier))) + geom_step(data = iso_df, mapping = aes(x = x, y = y)) + labs(x= "Pure Premium", title = "Commercial premium", y = "", color = "Insurance Carrier") + ggplot2::theme_classic(base_size = 20)
+ theme(legend.position = "none")
)
ggsave("../figures/iso_pois_lnorm_sigma1.pdf")
(iso_plot <- ggplot(data = iso_df) + geom_step(mapping = aes(x= x, y = y, color = model)) +  ggplot2::theme_classic(base_size = 14) + labs(x= "Pure premium", title = "Commercial premium", y = "", color = "Models") +
scale_color_manual(
values = c("blue", "red", "green"), # Couleurs arbitraires
labels = latex_labels
) +  theme(legend.position="bottom",  legend.box = "horizontal"))
(iso_plot <- ggplot(data = iso_df) + geom_step(mapping = aes(x= x, y = y, color = model)) +  ggplot2::theme_classic(base_size = 14) + labs(x= "Pure premium", title = "Commercial premium", y = "", color = "Models") +
scale_color_manual(
values = c("blue", "red", "green"), # Couleurs arbitraires
labels = latex_labels
) +  theme(legend.position="bottom"))
(iso_plot <- ggplot(data = iso_df) + geom_step(mapping = aes(x= x, y = y, color = model)) +  ggplot2::theme_classic(base_size = 14) + labs(x= "Pure premium", title = "Commercial premium", y = "", color = "Models") +
scale_color_manual(
values = c("blue", "red", "green"), # Couleurs arbitraires
labels = latex_labels
) +  theme(legend.position="bottom"))
iso_df <- data.frame()
names(res_abc_list) <- model_names
latex_labels <- c(
expression(Pois(lambda) ~ "- Lognormal(" * mu * ", " * sigma == 1 * ")"),
expression(Pois(lambda) ~ "- Gamma(" * alpha * ", " * beta == 1 * ")"),
expression(Pois(lambda) ~ "- Lognormal(" * mu == 0 * ", " * sigma * ")")
)
for(k in 1:length(res_abc_list)){
if(names(res_abc_list[k]) %in% model_names_s){
map <- t(as.matrix(colMeans(extract_last_cloud(res_abc_list[[k]]))))
pp <- compute_metric_particle(data, p_p, loss_models[[k]], map, method = "map")$pp
# mode <- t(as.matrix(extract_mode(res_abc_list[[k]], loss_models[[k]], prior_distributions[[k]])))
# pp <- compute_metric_particle(data, p_p, loss_models[[k]], mode, method = "mode")$pp
res_iso <- isoreg(pp, data$x)
iso_df <- rbind(iso_df,
data.frame(model = rep(loss_models[[k]]$model_name, nrow(data)), x= sort(res_iso$x), y = res_iso$yf))
}
}
(iso_plot <- ggplot(data = iso_df) + geom_step(mapping = aes(x= x, y = y, color = model)) +  ggplot2::theme_classic(base_size = 14) + labs(x= "Pure premium", title = "Commercial premium", y = "", color = "Models") +
scale_color_manual(
values = c("blue", "red", "green"), # Couleurs arbitraires
labels = latex_labels
) +  theme(legend.position="bottom"))
ggsave("../figures/iso_real_data_all_models.pdf", iso_plot)
iso_df <- data.frame()
names(res_abc_list) <- model_names
latex_labels <- c(
expression(Pois(lambda) ~ "- Lognormal(" * mu * ", " * sigma == 1 * ")"),
expression(Pois(lambda) ~ "- Gamma(" * alpha * ", " * beta == 1 * ")"),
expression(Pois(lambda) ~ "- Lognormal(" * mu == 0 * ", " * sigma * ")")
)
for(k in 1:length(res_abc_list)){
if(names(res_abc_list[k]) %in% model_names_s){
map <- t(as.matrix(colMeans(extract_last_cloud(res_abc_list[[k]]))))
pp <- compute_metric_particle(data, p_p, loss_models[[k]], map, method = "map")$pp
# mode <- t(as.matrix(extract_mode(res_abc_list[[k]], loss_models[[k]], prior_distributions[[k]])))
# pp <- compute_metric_particle(data, p_p, loss_models[[k]], mode, method = "mode")$pp
res_iso <- isoreg(pp, data$x)
iso_df <- rbind(iso_df,
data.frame(model = rep(loss_models[[k]]$model_name, nrow(data)), x= sort(res_iso$x), y = res_iso$yf))
}
}
(iso_plot <- ggplot(data = iso_df) + geom_step(mapping = aes(x= x, y = y, color = model)) +  ggplot2::theme_classic(base_size = 14) + labs(x= "Pure premium", title = "Commercial premium", y = "", color = "Models") +
scale_color_manual(
values = c("blue", "red", "green"), # Couleurs arbitraires
labels = latex_labels
) +  theme(legend.position="bottom",  legend.box = "horizontal"))
ggsave("../figures/iso_real_data_all_models.pdf", iso_plot)
iso_df <- data.frame()
names(res_abc_list) <- model_names
latex_labels <- c(
expression(Pois(lambda) ~ "- Lognormal(" * mu * ", " * sigma == 1 * ")"),
expression(Pois(lambda) ~ "- Gamma(" * alpha * ", " * beta == 1 * ")"),
expression(Pois(lambda) ~ "- Lognormal(" * mu == 0 * ", " * sigma * ")")
)
for(k in 1:length(res_abc_list)){
if(names(res_abc_list[k]) %in% model_names_s){
map <- t(as.matrix(colMeans(extract_last_cloud(res_abc_list[[k]]))))
pp <- compute_metric_particle(data, p_p, loss_models[[k]], map, method = "map")$pp
# mode <- t(as.matrix(extract_mode(res_abc_list[[k]], loss_models[[k]], prior_distributions[[k]])))
# pp <- compute_metric_particle(data, p_p, loss_models[[k]], mode, method = "mode")$pp
res_iso <- isoreg(pp, data$x)
iso_df <- rbind(iso_df,
data.frame(model = rep(loss_models[[k]]$model_name, nrow(data)), x= sort(res_iso$x), y = res_iso$yf))
}
}
(iso_plot <- ggplot(data = iso_df) + geom_step(mapping = aes(x= x, y = y, color = model)) +  ggplot2::theme_classic(base_size = 14) + labs(x= "Pure premium", title = "Commercial premium", y = "", color = "Models") +
scale_color_manual(
values = c("blue", "red", "green"), # Couleurs arbitraires
labels = latex_labels
) +  theme(legend.position="bottom",  legend.box = "horizontal", legend.text = element_text(size = 10)))
ggsave("../figures/iso_real_data_all_models.pdf", iso_plot)
iso_df <- data.frame()
names(res_abc_list) <- model_names
latex_labels <- c(
expression(Pois(lambda) ~ "- Lognormal(" * mu * ", " * sigma == 1 * ")"),
expression(Pois(lambda) ~ "- Gamma(" * alpha * ", " * beta == 1 * ")"),
expression(Pois(lambda) ~ "- Lognormal(" * mu == 0 * ", " * sigma * ")")
)
for(k in 1:length(res_abc_list)){
if(names(res_abc_list[k]) %in% model_names_s){
map <- t(as.matrix(colMeans(extract_last_cloud(res_abc_list[[k]]))))
pp <- compute_metric_particle(data, p_p, loss_models[[k]], map, method = "map")$pp
# mode <- t(as.matrix(extract_mode(res_abc_list[[k]], loss_models[[k]], prior_distributions[[k]])))
# pp <- compute_metric_particle(data, p_p, loss_models[[k]], mode, method = "mode")$pp
res_iso <- isoreg(pp, data$x)
iso_df <- rbind(iso_df,
data.frame(model = rep(loss_models[[k]]$model_name, nrow(data)), x= sort(res_iso$x), y = res_iso$yf))
}
}
(iso_plot <- ggplot(data = iso_df) + geom_step(mapping = aes(x= x, y = y, color = model)) +  ggplot2::theme_classic(base_size = 14) + labs(x= "Pure premium", title = "Commercial premium", y = "", color = "Models") +
scale_color_manual(
values = c("blue", "red", "green"), # Couleurs arbitraires
labels = latex_labels
) +  theme(legend.position="bottom",  legend.box = "horizontal"))
ggsave("../figures/iso_real_data_all_models.pdf", iso_plot)
iso_df <- data.frame()
names(res_abc_list) <- model_names
latex_labels <- c(
expression(Pois(lambda) ~ "- Lognormal(" * mu * ", " * sigma == 1 * ")"),
expression(Pois(lambda) ~ "- Gamma(" * alpha * ", " * beta == 1 * ")"),
expression(Pois(lambda) ~ "- Lognormal(" * mu == 0 * ", " * sigma * ")")
)
for(k in 1:length(res_abc_list)){
if(names(res_abc_list[k]) %in% model_names_s){
map <- t(as.matrix(colMeans(extract_last_cloud(res_abc_list[[k]]))))
pp <- compute_metric_particle(data, p_p, loss_models[[k]], map, method = "map")$pp
# mode <- t(as.matrix(extract_mode(res_abc_list[[k]], loss_models[[k]], prior_distributions[[k]])))
# pp <- compute_metric_particle(data, p_p, loss_models[[k]], mode, method = "mode")$pp
res_iso <- isoreg(pp, data$x)
iso_df <- rbind(iso_df,
data.frame(model = rep(loss_models[[k]]$model_name, nrow(data)), x= sort(res_iso$x), y = res_iso$yf))
}
}
(iso_plot <- ggplot(data = iso_df) + geom_step(mapping = aes(x= x, y = y, color = model)) +  ggplot2::theme_classic(base_size = 14) + labs(x= "Pure premium", title = "Commercial premium", y = "", color = "Models") +
scale_color_manual(
values = c("blue", "red", "green"), # Couleurs arbitraires
labels = latex_labels
) +  theme(legend.position="bottom",  legend.box = "vertical"))
ggsave("../figures/iso_real_data_all_models.pdf", iso_plot)
(iso_plot <- ggplot(data = iso_df) + geom_step(mapping = aes(x= x, y = y, color = model)) +  ggplot2::theme_classic(base_size = 14) + labs(x= "Pure premium", title = "Commercial premium", y = "", color = "Models") +
scale_color_manual(
values = c("blue", "red", "green"), # Couleurs arbitraires
labels = latex_labels
) +  theme(legend.position="bottom",legend.title.position = "top",  legend.box = "vertical"))
(iso_plot <- ggplot(data = iso_df) + geom_step(mapping = aes(x= x, y = y, color = model)) +  ggplot2::theme_classic(base_size = 14) + labs(x= "Pure premium", title = "Commercial premium", y = "", color = "Models") +
scale_color_manual(
values = c("blue", "red", "green"), # Couleurs arbitraires
labels = latex_labels
) +  theme(legend.position="bottom",legend.title.position = "top",  legend.box = "vertical", legend.byrow = TRUE))
(iso_plot <- ggplot(data = iso_df) + geom_step(mapping = aes(x= x, y = y, color = model)) +  ggplot2::theme_classic(base_size = 14) + labs(x= "Pure premium", title = "Commercial premium", y = "", color = "Models") +
scale_color_manual(
values = c("blue", "red", "green"), # Couleurs arbitraires
labels = latex_labels
) +  theme(legend.position="bottom",legend.title.position = "top",  legend.box = "vertical", legend.direction = "vertical"))
(iso_plot <- ggplot(data = iso_df) + geom_step(mapping = aes(x= x, y = y, color = model)) +  ggplot2::theme_classic(base_size = 14) + labs(x= "Pure premium", title = "Commercial premium", y = "", color = "Models") +
scale_color_manual(
values = c("blue", "red", "green"), # Couleurs arbitraires
labels = latex_labels
) +  theme(legend.position="bottom",legend.title.position = "left",  legend.box = "vertical", legend.direction = "vertical"))
(iso_plot <- ggplot(data = iso_df) + geom_step(mapping = aes(x= x, y = y, color = model)) +  ggplot2::theme_classic(base_size = 14) + labs(x= "Pure premium", title = "Commercial premium", y = "", color = "Models") +
scale_color_manual(
values = c("blue", "red", "green"), # Couleurs arbitraires
labels = latex_labels
) +  theme(legend.position="bottom",legend.title.position = "top",  legend.box = "vertical", legend.direction = "horizontal"))
(iso_plot <- ggplot(data = iso_df) + geom_step(mapping = aes(x= x, y = y, color = model)) +  ggplot2::theme_classic(base_size = 14) + labs(x= "Pure premium", title = "Commercial premium", y = "", color = "Models") +
scale_color_manual(
values = c("blue", "red", "green"), # Couleurs arbitraires
labels = latex_labels
) +  theme(legend.position="bottom",legend.title.position = "top",legend.direction = "horizontal"))
(iso_plot <- ggplot(data = iso_df) + geom_step(mapping = aes(x= x, y = y, color = model)) +  ggplot2::theme_classic(base_size = 14) + labs(x= "Pure premium", title = "Commercial premium", y = "", color = "Models") +
scale_color_manual(
values = c("blue", "red", "green"), # Couleurs arbitraires
labels = latex_labels
) +  theme(legend.position="bottom",legend.title.position = "top",legend.direction = "horizontal", legend.location = "plot"))
iso_df <- data.frame()
names(res_abc_list) <- model_names
latex_labels <- c(
expression(Pois(lambda) ~ "- Lognormal(" * mu * ", " * sigma == 1 * ")"),
expression(Pois(lambda) ~ "- Gamma(" * alpha * ", " * beta == 1 * ")"),
expression(Pois(lambda) ~ "- Lognormal(" * mu == 0 * ", " * sigma * ")")
)
for(k in 1:length(res_abc_list)){
if(names(res_abc_list[k]) %in% model_names_s){
map <- t(as.matrix(colMeans(extract_last_cloud(res_abc_list[[k]]))))
pp <- compute_metric_particle(data, p_p, loss_models[[k]], map, method = "map")$pp
# mode <- t(as.matrix(extract_mode(res_abc_list[[k]], loss_models[[k]], prior_distributions[[k]])))
# pp <- compute_metric_particle(data, p_p, loss_models[[k]], mode, method = "mode")$pp
res_iso <- isoreg(pp, data$x)
iso_df <- rbind(iso_df,
data.frame(model = rep(loss_models[[k]]$model_name, nrow(data)), x= sort(res_iso$x), y = res_iso$yf))
}
}
(iso_plot <- ggplot(data = iso_df) + geom_step(mapping = aes(x= x, y = y, color = model)) +  ggplot2::theme_classic(base_size = 14) + labs(x= "Pure premium", title = "Commercial premium", y = "", color = "Models") +
scale_color_manual(
values = c("blue", "red", "green"), # Couleurs arbitraires
labels = latex_labels
) +  theme(legend.position="bottom",legend.title.position = "top",legend.direction = "horizontal", legend.location = "plot"))
ggsave("../figures/iso_real_data_all_models.pdf", iso_plot)
knitr::opts_chunk$set(echo = TRUE)
library(latex2exp)
library(IsoPriceR)
library(ggplot2)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
set.seed(142)
# Loss model
freq_dist <- model("poisson", c("lambda"))
sev_dist <- model("lognormal", c("mu", "sigma"))
l_m <- loss_model(freq_dist, sev_dist, "Poisson-Lognormal")
# True parameter
lambda_true <- 3; mu_true <- 0; sigma_true <- 1
true_parms <- t(as.matrix(c(lambda_true, mu_true, sigma_true)))
colnames(true_parms) <- l_m$parm_names
# Data
## Sample of claim data to calculate the true pure premium via Monte Carlo
X_true <- sample_X(l_m, true_parms, R = 10000)
## Characteristics of the pure premium which depends on the parameter of the insurance coverage
p_p <- pure_premium("xs", c("r", "d", "l"))
## Random premium parameters
n <- 100; d <- runif(n, min = 0, max =  6); r <- runif(n, min = 0.5, max =  1); l <- rep(Inf, n)
## Data frame with the insurance coverage parameters and the pure premium
th_premium <- matrix(c(r, d, l), nrow = n)
pps <- compute_pure_premia(X_true, coverage_type = "xs", th_premium)
df_pp <- data.frame(r = r, d = d, l = l, pp=pps)
## Scatter plot of pure premium as a function of the deductibe and depending on the rate of coverage
(pp_plot <- ggplot(data = df_pp) + geom_point(mapping = aes(x= d, y = pp, size = r)) + labs(x= "d", y = "Pure premium", title = "") + ggplot2::theme_classic(base_size = 20) )
ggsave("../figures/pp_plot.pdf", pp_plot)
# Random safety loading
eta <- runif(n, 1.5, 3)
#Calculation of the commercial premium
df_pp["cp_linear"] <- eta * df_pp$pp
data <- df_pp[c("r", "d", "l")]
data["x"] <- df_pp$cp
# Scatter plot of comercial premium as a function of the pure premium
(cp_plot <- ggplot(data = df_pp) + geom_point(mapping = aes(x= pp, y = cp_linear))  + labs(x= "Pure premium", y = "Commercial premium", title = "") + ggplot2::theme_classic(base_size = 20) )
ggsave("../figures/cp_plot.pdf", cp_plot)
# Isotonic fit of commercial premium explained by pure premium
res_iso <- isoreg(df_pp$pp, df_pp$cp_linear)
df_pp <- df_pp[order(df_pp$pp), ]
df_pp["cp_iso_linear"] <- res_iso$yf
# Visualization of the isotonic fit
(iso_plot <- ggplot(data = df_pp) + geom_point(mapping = aes(x= pp, y = cp_linear)) + geom_step(mapping = aes(x= pp, y = cp_iso_linear)) +  ggplot2::theme_classic(base_size = 20) + labs(x= "Pure premium", y = "Commercial premium", title = ""))
ggsave("../figures/iso_plot.pdf", iso_plot)
data <- df_pp[,c("r", "d", "l")]
data["x"] <- df_pp$pp
ths_premium <- as.matrix(data[p_p$parm_names])
lambda_true <- 3; mu_true <- 0; sigma_true <- 1
# Pure premium calculation for a range of risk model parameters
lambdas<- seq(0.5, 5, 0.1); sigmas <- seq(0.1, 2, 0.1)
cloud <- as.matrix(expand.grid(lambdas, c(0),sigmas))
colnames(cloud) <- l_m$parm_names
X <- sample_X(l_m , cloud, R = 10000)
pp_fake <- compute_pure_premia(X, coverage_type = "xs", ths_premium)
# Calculation of the RMSE between true and wrong pure premium
ds <- sapply(1:nrow(cloud), function(k) mean((pp_fake[, k] - data$x)^2)^(1/2))
df_ds <- data.frame(cloud)
df_ds <- cbind(df_ds, ds)
# Generate custom contour levels
min_ds <- min(df_ds$ds); max_ds <- max(df_ds$ds)
breaks <- seq(min_ds, 1.5, length.out = 10)  # 5 levels from min_ds to 10
breaks <- round(c(breaks, seq(1.5, max(df_ds$ds), length.out = 2)) *100) / 100  # 10 levels from 10 to max_ds
(pp_contour_plot <- ggplot(df_ds, aes(x = lambda, y = sigma, z = ds)) +
geom_contour_filled(breaks = breaks) +
labs(x = TeX("$\\lambda$"), y = TeX("$\\sigma$"), fill = "RMSE") + ggplot2::theme_classic(base_size = 20) + ggplot2::theme(legend.position="right"))
ggsave(paste0("../figures/pp_contour_plot.pdf"), pp_contour_plot)
data["x"] <- df_pp$cp_linear
cps <- data$x
# Isotonic fit of the commercial premium associated to the wrong pure preium
ress_iso <- lapply(1:ncol(pp_fake), function(k) isoreg(pp_fake[, k], cps))
fs <- lapply(ress_iso, function(res_iso) stepfun(sort(res_iso$x), c(min(res_iso$yf) /2 ,
res_iso$yf), f = 1))
ds <- sapply(1:nrow(cloud), function(k) mean((fs[[k]](pp_fake[, k]) - data$x)^2)^(1/2))
df_ds <- data.frame(cloud)
df_ds <- cbind(df_ds, ds)
min_ds <- min(df_ds$ds)
# Generate custom contour levels
breaks <- seq(min_ds, 1, length.out = 10)  # 5 levels from min_ds to 10
breaks <- round(c(breaks, seq(1, max(df_ds$ds), length.out = 2)) *100) / 100  # 10 levels from 10 to max_ds
(cp_contour_plot_wo_rg <- ggplot(df_ds, aes(x = lambda, y = sigma, z = ds)) +
geom_contour_filled(breaks = breaks) +
labs(x = TeX("$\\lambda$"), y = TeX("$\\sigma$"), fill = TeX("$\\epsilon$")) + ggplot2::theme_classic(base_size = 20) + ggplot2::theme(legend.position="right"))
ggsave(paste0("../figures/cp_contour_plot_wo_rg.pdf"), cp_contour_plot_wo_rg)
# Adding the regukarization terms
sp_bounds <- c(min(df_pp$pp / df_pp$cp_linear), max(df_pp$pp / df_pp$cp_linear))
ds1 <- sapply(1:ncol(pp_fake), function(k) sqrt(mean((pmax(cps - pp_fake[,k] /sp_bounds[1], 0) )^2)))
ds2 <- sapply(1:ncol(pp_fake), function(k) sqrt(mean((pmax( pp_fake[,k] / sp_bounds[2] - cps , 0) )^2)))
ds <- ds + ds1 + ds2
df_ds <- data.frame(cloud)
df_ds <- cbind(df_ds, ds)
# Generate custom contour levels
breaks <- seq(min_ds, 3.5, length.out = 10)  # 5 levels from min_ds to 10
breaks <- round(c(breaks, seq(3.5, max(df_ds$ds), length.out = 2)) *100) / 100  # 10 levels from 10 to max_ds
(cp_contour_plot_w_rg <- ggplot(df_ds, aes(x = lambda, y = sigma, z = ds)) +
geom_contour_filled(breaks = breaks) +
labs(x = TeX("$\\lambda$"), y = TeX("$\\sigma$"), fill = TeX("$\\epsilon$")) + ggplot2::theme_classic(base_size = 20) + ggplot2::theme(legend.position="right"))
ggsave(paste0("../figures/cp_contour_plot_w_rg.pdf"), cp_contour_plot_w_rg)
data <- df_pp[,c("r", "d", "l")]
data["x"] <- df_pp$pp
ths_premium <- as.matrix(data[p_p$parm_names])
lambda_true <- 3; mu_true <- 0; sigma_true <- 1
# Pure premium calculation for a range of risk model parameters
lambdas<- seq(0.5, 5, 0.1); sigmas <- seq(0.1, 2, 0.1)
cloud <- as.matrix(expand.grid(lambdas, c(0),sigmas))
colnames(cloud) <- l_m$parm_names
X <- sample_X(l_m , cloud, R = 10000)
pp_fake <- compute_pure_premia(X, coverage_type = "xs", ths_premium)
# Calculation of the RMSE between true and wrong pure premium
ds <- sapply(1:nrow(cloud), function(k) mean((pp_fake[, k] - data$x)^2)^(1/2))
df_ds <- data.frame(cloud)
df_ds <- cbind(df_ds, ds)
# Generate custom contour levels
min_ds <- min(df_ds$ds); max_ds <- max(df_ds$ds)
breaks <- seq(min_ds, 1.5, length.out = 10)  # 5 levels from min_ds to 10
breaks <- round(c(breaks, seq(1.5, max(df_ds$ds), length.out = 2)) *100) / 100  # 10 levels from 10 to max_ds
(pp_contour_plot <- ggplot(df_ds, aes(x = lambda, y = sigma, z = ds)) +
geom_contour_filled(breaks = breaks) +
labs(x = TeX("$\\lambda$"), y = TeX("$\\sigma$"), fill = "RMSE") + ggplot2::theme_classic(base_size = 20) + ggplot2::theme(legend.position="right"))
ggsave(paste0("../figures/pp_contour_plot.pdf"), pp_contour_plot)
